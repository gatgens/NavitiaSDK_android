/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.75.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import org.kisio.NavitiaSDK.models.VehicleJourneys;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VehicleJourneysApi {
    private ApiClient apiClient;

    public VehicleJourneysApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatUriVehicleJourneys
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/vehicle_journeys"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriVehicleJourneys(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriVehicleJourneys(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriVehicleJourneys(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageLonLatUriVehicleJourneys(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageLonLatUriVehicleJourneysWithHttpInfo(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageLonLatUriVehicleJourneysWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriVehicleJourneysRequestBuilder newCoverageLonLatUriVehicleJourneysRequestBuilder() {
        return new CoverageLonLatUriVehicleJourneysRequestBuilder(this);
    }

    public class CoverageLonLatUriVehicleJourneysRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatUriVehicleJourneysRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriVehicleJourneysRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriVehicleJourneysRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriVehicleJourneysAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriVehicleJourneysAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriVehicleJourneysId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/vehicle_journeys/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriVehicleJourneysId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysIdCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageLonLatUriVehicleJourneysId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageLonLatUriVehicleJourneysIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageLonLatUriVehicleJourneysIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriVehicleJourneysIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriVehicleJourneysIdRequestBuilder newCoverageLonLatUriVehicleJourneysIdRequestBuilder() {
        return new CoverageLonLatUriVehicleJourneysIdRequestBuilder(this);
    }

    public class CoverageLonLatUriVehicleJourneysIdRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatUriVehicleJourneysIdRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriVehicleJourneysIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriVehicleJourneysIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriVehicleJourneysIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatVehicleJourneys
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/vehicle_journeys"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatVehicleJourneys(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatVehicleJourneys(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageLonLatVehicleJourneys(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageLonLatVehicleJourneysWithHttpInfo(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageLonLatVehicleJourneysWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatVehicleJourneysRequestBuilder newCoverageLonLatVehicleJourneysRequestBuilder() {
        return new CoverageLonLatVehicleJourneysRequestBuilder(this);
    }

    public class CoverageLonLatVehicleJourneysRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatVehicleJourneysRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatVehicleJourneysRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatVehicleJourneysRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatVehicleJourneysRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageLonLatVehicleJourneysAsync(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatVehicleJourneysAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatVehicleJourneysId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/vehicle_journeys/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatVehicleJourneysId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysIdCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageLonLatVehicleJourneysId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageLonLatVehicleJourneysIdWithHttpInfo(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageLonLatVehicleJourneysIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatVehicleJourneysIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatVehicleJourneysIdRequestBuilder newCoverageLonLatVehicleJourneysIdRequestBuilder() {
        return new CoverageLonLatVehicleJourneysIdRequestBuilder(this);
    }

    public class CoverageLonLatVehicleJourneysIdRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatVehicleJourneysIdRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatVehicleJourneysIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatVehicleJourneysIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatVehicleJourneysIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageLonLatVehicleJourneysIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatVehicleJourneysIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriVehicleJourneys
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/vehicle_journeys"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriVehicleJourneys(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriVehicleJourneys(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageRegionUriVehicleJourneys(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageRegionUriVehicleJourneysWithHttpInfo(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageRegionUriVehicleJourneysWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysAsync(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriVehicleJourneysRequestBuilder newCoverageRegionUriVehicleJourneysRequestBuilder() {
        return new CoverageRegionUriVehicleJourneysRequestBuilder(this);
    }

    public class CoverageRegionUriVehicleJourneysRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionUriVehicleJourneysRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriVehicleJourneysRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriVehicleJourneysRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriVehicleJourneysRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageRegionUriVehicleJourneysAsync(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriVehicleJourneysAsyncRaw(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriVehicleJourneysId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysIdCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/vehicle_journeys/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriVehicleJourneysId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysIdCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageRegionUriVehicleJourneysId(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageRegionUriVehicleJourneysIdWithHttpInfo(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageRegionUriVehicleJourneysIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysIdAsync(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriVehicleJourneysIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriVehicleJourneysIdRequestBuilder newCoverageRegionUriVehicleJourneysIdRequestBuilder() {
        return new CoverageRegionUriVehicleJourneysIdRequestBuilder(this);
    }

    public class CoverageRegionUriVehicleJourneysIdRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionUriVehicleJourneysIdRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriVehicleJourneysIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriVehicleJourneysIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriVehicleJourneysIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageRegionUriVehicleJourneysIdAsync(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriVehicleJourneysIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionVehicleJourneys
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionVehicleJourneysCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/vehicle_journeys"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionVehicleJourneysValidateBeforeCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionVehicleJourneys(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageRegionVehicleJourneys(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageRegionVehicleJourneysWithHttpInfo(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageRegionVehicleJourneysWithHttpInfo(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionVehicleJourneysAsync(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionVehicleJourneysAsyncRaw(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionVehicleJourneysRequestBuilder newCoverageRegionVehicleJourneysRequestBuilder() {
        return new CoverageRegionVehicleJourneysRequestBuilder(this);
    }

    public class CoverageRegionVehicleJourneysRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionVehicleJourneysRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionVehicleJourneysRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionVehicleJourneysRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionVehicleJourneysRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageRegionVehicleJourneysAsync(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionVehicleJourneysAsyncRaw(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionVehicleJourneysId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionVehicleJourneysIdCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/vehicle_journeys/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionVehicleJourneysIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionVehicleJourneysId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionVehicleJourneysId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysIdCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getCoverageRegionVehicleJourneysId(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getCoverageRegionVehicleJourneysIdWithHttpInfo(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getCoverageRegionVehicleJourneysIdWithHttpInfo(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionVehicleJourneysIdAsync(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionVehicleJourneysIdAsyncRaw(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionVehicleJourneysIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionVehicleJourneysIdRequestBuilder newCoverageRegionVehicleJourneysIdRequestBuilder() {
        return new CoverageRegionVehicleJourneysIdRequestBuilder(this);
    }

    public class CoverageRegionVehicleJourneysIdRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionVehicleJourneysIdRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionVehicleJourneysIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionVehicleJourneysIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionVehicleJourneysIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getCoverageRegionVehicleJourneysIdAsync(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionVehicleJourneysIdAsyncRaw(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getVehicleJourneys
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getVehicleJourneysCall(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/vehicle_journeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVehicleJourneysValidateBeforeCall(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalCode' is set
        if (externalCode == null) {
            throw new ApiException("Missing the required parameter 'externalCode' when calling getVehicleJourneys(Async)");
        }
        

        com.squareup.okhttp.Call call = getVehicleJourneysCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return VehicleJourneys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected VehicleJourneys getVehicleJourneys(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<VehicleJourneys> resp = getVehicleJourneysWithHttpInfo(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;VehicleJourneys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<VehicleJourneys> getVehicleJourneysWithHttpInfo(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getVehicleJourneysValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getVehicleJourneysAsync(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<VehicleJourneys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVehicleJourneysValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleJourneys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getVehicleJourneysAsyncRaw(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVehicleJourneysValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public VehicleJourneysRequestBuilder newVehicleJourneysRequestBuilder() {
        return new VehicleJourneysRequestBuilder(this);
    }

    public class VehicleJourneysRequestBuilder {
        private VehicleJourneysApi currentApi;
        private String basePath;
        private String debugUrl;
        private String externalCode;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public VehicleJourneysRequestBuilder(VehicleJourneysApi currentApi) {
            this.currentApi = currentApi;
        }

        public VehicleJourneysRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public VehicleJourneysRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public VehicleJourneysRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public VehicleJourneysRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public VehicleJourneysRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public VehicleJourneysRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public VehicleJourneysRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public VehicleJourneysRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public VehicleJourneysRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public VehicleJourneysRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public VehicleJourneysRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public VehicleJourneysRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public VehicleJourneysRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public VehicleJourneysRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public VehicleJourneysRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public VehicleJourneysRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public VehicleJourneysRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public VehicleJourneysRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<VehicleJourneys > callback) throws ApiException {
            return currentApi.getVehicleJourneysAsync(basePath, debugUrl, this.externalCode, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getVehicleJourneysAsyncRaw(basePath, debugUrl, this.externalCode, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
}
