/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.78.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.kisio.NavitiaSDK.models.Places;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaceUriApi {
    private ApiClient apiClient;

    public PlaceUriApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatPlacesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatPlacesIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/places/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (bssStands != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatPlacesIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatPlacesId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatPlacesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatPlacesId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatPlacesIdCall(basePath, debugUrl, lat, lon, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getCoverageLonLatPlacesId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<Places> resp = getCoverageLonLatPlacesIdWithHttpInfo(basePath, debugUrl, lat, lon, id, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getCoverageLonLatPlacesIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        okhttp3.Call call = getCoverageLonLatPlacesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPlacesIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatPlacesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPlacesIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatPlacesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatPlacesIdRequestBuilder newCoverageLonLatPlacesIdRequestBuilder() {
        return new CoverageLonLatPlacesIdRequestBuilder(this);
    }

    public class CoverageLonLatPlacesIdRequestBuilder {
        private PlaceUriApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageLonLatPlacesIdRequestBuilder(PlaceUriApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatPlacesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatPlacesIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatPlacesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageRegionPlacesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionPlacesIdCall(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/places/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (bssStands != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionPlacesIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionPlacesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionPlacesId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionPlacesIdCall(basePath, debugUrl, region, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getCoverageRegionPlacesId(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<Places> resp = getCoverageRegionPlacesIdWithHttpInfo(basePath, debugUrl, region, id, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getCoverageRegionPlacesIdWithHttpInfo(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        okhttp3.Call call = getCoverageRegionPlacesIdValidateBeforeCall(basePath, debugUrl, region, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPlacesIdAsync(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionPlacesIdValidateBeforeCall(basePath, debugUrl, region, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPlacesIdAsyncRaw(String basePath, String debugUrl, String region, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionPlacesIdValidateBeforeCall(basePath, debugUrl, region, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionPlacesIdRequestBuilder newCoverageRegionPlacesIdRequestBuilder() {
        return new CoverageRegionPlacesIdRequestBuilder(this);
    }

    public class CoverageRegionPlacesIdRequestBuilder {
        private PlaceUriApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageRegionPlacesIdRequestBuilder(PlaceUriApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionPlacesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionPlacesIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionPlacesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesIdAsync(basePath, debugUrl, this.region, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesIdAsyncRaw(basePath, debugUrl, this.region, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getPlacesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getPlacesIdCall(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/places/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (bssStands != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlacesIdValidateBeforeCall(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPlacesId(Async)");
        }
        

        okhttp3.Call call = getPlacesIdCall(basePath, debugUrl, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getPlacesId(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<Places> resp = getPlacesIdWithHttpInfo(basePath, debugUrl, id, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getPlacesIdWithHttpInfo(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        okhttp3.Call call = getPlacesIdValidateBeforeCall(basePath, debugUrl, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getPlacesIdAsync(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getPlacesIdValidateBeforeCall(basePath, debugUrl, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param id Id of the object you want to query (required)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getPlacesIdAsyncRaw(String basePath, String debugUrl, String id, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getPlacesIdValidateBeforeCall(basePath, debugUrl, id, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public PlacesIdRequestBuilder newPlacesIdRequestBuilder() {
        return new PlacesIdRequestBuilder(this);
    }

    public class PlacesIdRequestBuilder {
        private PlaceUriApi currentApi;
        private String basePath;
        private String debugUrl;
        private String id;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public PlacesIdRequestBuilder(PlaceUriApi currentApi) {
            this.currentApi = currentApi;
        }

        public PlacesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public PlacesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public PlacesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public PlacesIdRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public PlacesIdRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public PlacesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public PlacesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getPlacesIdAsync(basePath, debugUrl, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getPlacesIdAsyncRaw(basePath, debugUrl, this.id, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
}
