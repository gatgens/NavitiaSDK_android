/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.75.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.kisio.NavitiaSDK.models.PlacesNearby;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlacesNearbyApi {
    private ApiClient apiClient;

    public PlacesNearbyApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoordLonLatPlacesNearby
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoordLonLatPlacesNearbyCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coord/{lon};{lat}/places_nearby"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoordLonLatPlacesNearbyValidateBeforeCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordLonLatPlacesNearby(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordLonLatPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoordLonLatPlacesNearbyCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoordLonLatPlacesNearby(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoordLonLatPlacesNearbyWithHttpInfo(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoordLonLatPlacesNearbyWithHttpInfo(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoordLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoordLonLatPlacesNearbyAsync(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoordLonLatPlacesNearbyAsyncRaw(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoordLonLatPlacesNearbyRequestBuilder newCoordLonLatPlacesNearbyRequestBuilder() {
        return new CoordLonLatPlacesNearbyRequestBuilder(this);
    }

    public class CoordLonLatPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoordLonLatPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoordLonLatPlacesNearbyRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoordLonLatPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoordLonLatPlacesNearbyAsync(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoordLonLatPlacesNearbyAsyncRaw(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoordsLonLatPlacesNearby
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoordsLonLatPlacesNearbyCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coords/{lon};{lat}/places_nearby"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoordsLonLatPlacesNearbyValidateBeforeCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordsLonLatPlacesNearby(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordsLonLatPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoordsLonLatPlacesNearbyCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoordsLonLatPlacesNearby(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoordsLonLatPlacesNearbyWithHttpInfo(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoordsLonLatPlacesNearbyWithHttpInfo(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoordsLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoordsLonLatPlacesNearbyAsync(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordsLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoordsLonLatPlacesNearbyAsyncRaw(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoordsLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoordsLonLatPlacesNearbyRequestBuilder newCoordsLonLatPlacesNearbyRequestBuilder() {
        return new CoordsLonLatPlacesNearbyRequestBuilder(this);
    }

    public class CoordsLonLatPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoordsLonLatPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoordsLonLatPlacesNearbyRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoordsLonLatPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoordsLonLatPlacesNearbyAsync(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoordsLonLatPlacesNearbyAsyncRaw(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatPlacesNearby
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatPlacesNearbyCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/places_nearby"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatPlacesNearbyValidateBeforeCall(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatPlacesNearby(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatPlacesNearbyCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoverageLonLatPlacesNearby(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoverageLonLatPlacesNearbyWithHttpInfo(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoverageLonLatPlacesNearbyWithHttpInfo(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatPlacesNearbyAsync(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatPlacesNearbyAsyncRaw(BigDecimal lat, BigDecimal lon, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatPlacesNearbyValidateBeforeCall(lat, lon, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatPlacesNearbyRequestBuilder newCoverageLonLatPlacesNearbyRequestBuilder() {
        return new CoverageLonLatPlacesNearbyRequestBuilder(this);
    }

    public class CoverageLonLatPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageLonLatPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatPlacesNearbyRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesNearbyAsync(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesNearbyAsyncRaw(this.lat, this.lon, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriPlacesNearby
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriPlacesNearbyCall(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/places_nearby"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriPlacesNearbyValidateBeforeCall(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriPlacesNearby(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriPlacesNearby(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriPlacesNearbyCall(lat, lon, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoverageLonLatUriPlacesNearby(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoverageLonLatUriPlacesNearbyWithHttpInfo(lat, lon, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoverageLonLatUriPlacesNearbyWithHttpInfo(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriPlacesNearbyValidateBeforeCall(lat, lon, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriPlacesNearbyAsync(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriPlacesNearbyValidateBeforeCall(lat, lon, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriPlacesNearbyAsyncRaw(BigDecimal lat, BigDecimal lon, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriPlacesNearbyValidateBeforeCall(lat, lon, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriPlacesNearbyRequestBuilder newCoverageLonLatUriPlacesNearbyRequestBuilder() {
        return new CoverageLonLatUriPlacesNearbyRequestBuilder(this);
    }

    public class CoverageLonLatUriPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageLonLatUriPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriPlacesNearbyRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriPlacesNearbyAsync(this.lat, this.lon, this.uri, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriPlacesNearbyAsyncRaw(this.lat, this.lon, this.uri, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageRegionPlacesNearby
     * @param region  The region you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionPlacesNearbyCall(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/places_nearby"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionPlacesNearbyValidateBeforeCall(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionPlacesNearbyCall(region, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoverageRegionPlacesNearby(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoverageRegionPlacesNearbyWithHttpInfo(region, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoverageRegionPlacesNearbyWithHttpInfo(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionPlacesNearbyValidateBeforeCall(region, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionPlacesNearbyAsync(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionPlacesNearbyValidateBeforeCall(region, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionPlacesNearbyAsyncRaw(String region, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionPlacesNearbyValidateBeforeCall(region, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionPlacesNearbyRequestBuilder newCoverageRegionPlacesNearbyRequestBuilder() {
        return new CoverageRegionPlacesNearbyRequestBuilder(this);
    }

    public class CoverageRegionPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private String region;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageRegionPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionPlacesNearbyRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesNearbyAsync(this.region, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesNearbyAsyncRaw(this.region, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriPlacesNearby
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriPlacesNearbyCall(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/places_nearby"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (bssStands != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "bss_stands", bssStands));
        if (addPoiInfos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "add_poi_infos[]", addPoiInfos));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriPlacesNearbyValidateBeforeCall(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriPlacesNearby(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriPlacesNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriPlacesNearbyCall(region, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PlacesNearby
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PlacesNearby getCoverageRegionUriPlacesNearby(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PlacesNearby> resp = getCoverageRegionUriPlacesNearbyWithHttpInfo(region, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PlacesNearby&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PlacesNearby> getCoverageRegionUriPlacesNearbyWithHttpInfo(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriPlacesNearbyValidateBeforeCall(region, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriPlacesNearbyAsync(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PlacesNearby> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriPlacesNearbyValidateBeforeCall(region, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlacesNearby>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param type Type of the objects to return (optional, default to [u'stop_area', u'stop_point', u'poi'])
     * @param filter Filter your objects (optional)
     * @param distance Distance range of the query in meters (optional, default to 500)
     * @param count Elements per page (optional, default to 10)
     * @param depth Maximum depth on objects (optional, default to 1)
     * @param startPage The page number of the ptref result (optional)
     * @param bssStands DEPRECATED, Use add_poi_infos[]&#x3D;bss_stands (optional)
     * @param addPoiInfos Show more information about the poi if it&#39;s available, for instance, show BSS/car park availability in the pois(BSS/car park) of the response (optional, default to [u'bss_stands', u'car_park'])
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriPlacesNearbyAsyncRaw(String region, String uri, List<String> type, String filter, Integer distance, Integer count, Integer depth, Integer startPage, Boolean bssStands, List<String> addPoiInfos, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriPlacesNearbyValidateBeforeCall(region, uri, type, filter, distance, count, depth, startPage, bssStands, addPoiInfos, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriPlacesNearbyRequestBuilder newCoverageRegionUriPlacesNearbyRequestBuilder() {
        return new CoverageRegionUriPlacesNearbyRequestBuilder(this);
    }

    public class CoverageRegionUriPlacesNearbyRequestBuilder {
        private PlacesNearbyApi currentApi;
        private String region;
        private String uri;
        private List<String> type;
        private String filter;
        private Integer distance;
        private Integer count;
        private Integer depth;
        private Integer startPage;
        private Boolean bssStands;
        private List<String> addPoiInfos;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageRegionUriPlacesNearbyRequestBuilder(PlacesNearbyApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriPlacesNearbyRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withBssStands(Boolean bssStands) {
            this.bssStands = bssStands;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withAddPoiInfos(List<String> addPoiInfos) {
            this.addPoiInfos = addPoiInfos;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriPlacesNearbyRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<PlacesNearby > callback) throws ApiException {
            return currentApi.getCoverageRegionUriPlacesNearbyAsync(this.region, this.uri, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriPlacesNearbyAsyncRaw(this.region, this.uri, this.type, this.filter, this.distance, this.count, this.depth, this.startPage, this.bssStands, this.addPoiInfos, this.disableGeojson, this.disableDisruption, callback);
        }
    }
}
