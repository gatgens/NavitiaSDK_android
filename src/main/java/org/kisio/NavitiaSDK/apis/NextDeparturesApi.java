/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.75.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import org.kisio.NavitiaSDK.models.Departures;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NextDeparturesApi {
    private ApiClient apiClient;

    public NextDeparturesApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatDepartures
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatDeparturesCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/departures"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatDeparturesValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatDepartures(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatDepartures(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatDeparturesCall(basePath, debugUrl, lat, lon, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return Departures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Departures getCoverageLonLatDepartures(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<Departures> resp = getCoverageLonLatDeparturesWithHttpInfo(basePath, debugUrl, lat, lon, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;Departures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Departures> getCoverageLonLatDeparturesWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatDeparturesAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<Departures> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatDeparturesAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatDeparturesRequestBuilder newCoverageLonLatDeparturesRequestBuilder() {
        return new CoverageLonLatDeparturesRequestBuilder(this);
    }

    public class CoverageLonLatDeparturesRequestBuilder {
        private NextDeparturesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageLonLatDeparturesRequestBuilder(NextDeparturesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatDeparturesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatDeparturesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageLonLatDeparturesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Departures > callback) throws ApiException {
            return currentApi.getCoverageLonLatDeparturesAsync(basePath, debugUrl, this.lat, this.lon, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatDeparturesAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriDepartures
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriDeparturesCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/departures"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriDeparturesValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriDepartures(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriDepartures(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriDepartures(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriDeparturesCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return Departures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Departures getCoverageLonLatUriDepartures(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<Departures> resp = getCoverageLonLatUriDeparturesWithHttpInfo(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;Departures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Departures> getCoverageLonLatUriDeparturesWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriDeparturesAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<Departures> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriDeparturesAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriDeparturesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriDeparturesRequestBuilder newCoverageLonLatUriDeparturesRequestBuilder() {
        return new CoverageLonLatUriDeparturesRequestBuilder(this);
    }

    public class CoverageLonLatUriDeparturesRequestBuilder {
        private NextDeparturesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageLonLatUriDeparturesRequestBuilder(NextDeparturesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriDeparturesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriDeparturesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageLonLatUriDeparturesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Departures > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDeparturesAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDeparturesAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageRegionDepartures
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionDeparturesCall(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/departures"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionDeparturesValidateBeforeCall(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionDepartures(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionDeparturesCall(basePath, debugUrl, region, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return Departures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Departures getCoverageRegionDepartures(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<Departures> resp = getCoverageRegionDeparturesWithHttpInfo(basePath, debugUrl, region, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;Departures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Departures> getCoverageRegionDeparturesWithHttpInfo(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionDeparturesValidateBeforeCall(basePath, debugUrl, region, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionDeparturesAsync(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<Departures> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionDeparturesValidateBeforeCall(basePath, debugUrl, region, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionDeparturesAsyncRaw(String basePath, String debugUrl, String region, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionDeparturesValidateBeforeCall(basePath, debugUrl, region, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionDeparturesRequestBuilder newCoverageRegionDeparturesRequestBuilder() {
        return new CoverageRegionDeparturesRequestBuilder(this);
    }

    public class CoverageRegionDeparturesRequestBuilder {
        private NextDeparturesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageRegionDeparturesRequestBuilder(NextDeparturesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionDeparturesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionDeparturesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageRegionDeparturesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Departures > callback) throws ApiException {
            return currentApi.getCoverageRegionDeparturesAsync(basePath, debugUrl, this.region, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionDeparturesAsyncRaw(basePath, debugUrl, this.region, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriDepartures
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriDeparturesCall(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/departures"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        if (basePath != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        if (debugUrl != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriDeparturesValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriDepartures(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriDepartures(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriDeparturesCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return Departures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Departures getCoverageRegionUriDepartures(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<Departures> resp = getCoverageRegionUriDeparturesWithHttpInfo(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;Departures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Departures> getCoverageRegionUriDeparturesWithHttpInfo(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriDeparturesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriDeparturesAsync(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<Departures> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriDeparturesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Departures>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriDeparturesAsyncRaw(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriDeparturesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriDeparturesRequestBuilder newCoverageRegionUriDeparturesRequestBuilder() {
        return new CoverageRegionUriDeparturesRequestBuilder(this);
    }

    public class CoverageRegionUriDeparturesRequestBuilder {
        private NextDeparturesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageRegionUriDeparturesRequestBuilder(NextDeparturesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriDeparturesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriDeparturesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageRegionUriDeparturesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Departures > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDeparturesAsync(basePath, debugUrl, this.region, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDeparturesAsyncRaw(basePath, debugUrl, this.region, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
}
