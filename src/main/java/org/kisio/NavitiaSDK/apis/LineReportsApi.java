/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.75.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import org.kisio.NavitiaSDK.models.LineReports;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineReportsApi {
    private ApiClient apiClient;

    public LineReportsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatLineReports
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatLineReportsCall(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/line_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatLineReportsValidateBeforeCall(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatLineReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatLineReports(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsCall(lat, lon, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected LineReports getCoverageLonLatLineReports(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageLonLatLineReportsWithHttpInfo(lat, lon, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<LineReports> getCoverageLonLatLineReportsWithHttpInfo(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsValidateBeforeCall(lat, lon, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatLineReportsAsync(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsValidateBeforeCall(lat, lon, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatLineReportsAsyncRaw(BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatLineReportsValidateBeforeCall(lat, lon, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatLineReportsRequestBuilder newCoverageLonLatLineReportsRequestBuilder() {
        return new CoverageLonLatLineReportsRequestBuilder(this);
    }

    public class CoverageLonLatLineReportsRequestBuilder {
        private LineReportsApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenUris;
        private Boolean disableGeojson;
        private DateTime since;
        private DateTime until;
        private List<String> tags;

        public CoverageLonLatLineReportsRequestBuilder(LineReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatLineReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatLineReportsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<LineReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatLineReportsAsync(this.lat, this.lon, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatLineReportsAsyncRaw(this.lat, this.lon, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriLineReports
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriLineReportsCall(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/line_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriLineReportsValidateBeforeCall(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriLineReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriLineReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriLineReports(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsCall(lat, lon, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected LineReports getCoverageLonLatUriLineReports(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageLonLatUriLineReportsWithHttpInfo(lat, lon, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<LineReports> getCoverageLonLatUriLineReportsWithHttpInfo(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsValidateBeforeCall(lat, lon, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriLineReportsAsync(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsValidateBeforeCall(lat, lon, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriLineReportsAsyncRaw(BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriLineReportsValidateBeforeCall(lat, lon, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriLineReportsRequestBuilder newCoverageLonLatUriLineReportsRequestBuilder() {
        return new CoverageLonLatUriLineReportsRequestBuilder(this);
    }

    public class CoverageLonLatUriLineReportsRequestBuilder {
        private LineReportsApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenUris;
        private Boolean disableGeojson;
        private DateTime since;
        private DateTime until;
        private List<String> tags;

        public CoverageLonLatUriLineReportsRequestBuilder(LineReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriLineReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriLineReportsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<LineReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLineReportsAsync(this.lat, this.lon, this.uri, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLineReportsAsyncRaw(this.lat, this.lon, this.uri, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionLineReports
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionLineReportsCall(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/line_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionLineReportsValidateBeforeCall(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionLineReports(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionLineReportsCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected LineReports getCoverageRegionLineReports(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageRegionLineReportsWithHttpInfo(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<LineReports> getCoverageRegionLineReportsWithHttpInfo(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionLineReportsValidateBeforeCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionLineReportsAsync(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionLineReportsValidateBeforeCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionLineReportsAsyncRaw(String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionLineReportsValidateBeforeCall(region, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionLineReportsRequestBuilder newCoverageRegionLineReportsRequestBuilder() {
        return new CoverageRegionLineReportsRequestBuilder(this);
    }

    public class CoverageRegionLineReportsRequestBuilder {
        private LineReportsApi currentApi;
        private String region;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenUris;
        private Boolean disableGeojson;
        private DateTime since;
        private DateTime until;
        private List<String> tags;

        public CoverageRegionLineReportsRequestBuilder(LineReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionLineReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionLineReportsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<LineReports > callback) throws ApiException {
            return currentApi.getCoverageRegionLineReportsAsync(this.region, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionLineReportsAsyncRaw(this.region, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriLineReports
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriLineReportsCall(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/line_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriLineReportsValidateBeforeCall(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriLineReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriLineReports(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return LineReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected LineReports getCoverageRegionUriLineReports(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        ApiResponse<LineReports> resp = getCoverageRegionUriLineReportsWithHttpInfo(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;LineReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<LineReports> getCoverageRegionUriLineReportsWithHttpInfo(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsValidateBeforeCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, null, null);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriLineReportsAsync(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<LineReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsValidateBeforeCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param since use disruptions valid after this date (optional)
     * @param until use disruptions valid before this date (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriLineReportsAsyncRaw(String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenUris, Boolean disableGeojson, DateTime since, DateTime until, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriLineReportsValidateBeforeCall(region, uri, depth, count, startPage, forbiddenUris, disableGeojson, since, until, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriLineReportsRequestBuilder newCoverageRegionUriLineReportsRequestBuilder() {
        return new CoverageRegionUriLineReportsRequestBuilder(this);
    }

    public class CoverageRegionUriLineReportsRequestBuilder {
        private LineReportsApi currentApi;
        private String region;
        private String uri;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenUris;
        private Boolean disableGeojson;
        private DateTime since;
        private DateTime until;
        private List<String> tags;

        public CoverageRegionUriLineReportsRequestBuilder(LineReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriLineReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriLineReportsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<LineReports > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLineReportsAsync(this.region, this.uri, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLineReportsAsyncRaw(this.region, this.uri, this.depth, this.count, this.startPage, this.forbiddenUris, this.disableGeojson, this.since, this.until, this.tags, callback);
        }
    }
}
