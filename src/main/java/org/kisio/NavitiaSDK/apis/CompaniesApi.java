/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.75.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.kisio.NavitiaSDK.models.Companies;
import org.joda.time.DateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompaniesApi {
    private ApiClient apiClient;

    public CompaniesApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatCompanies
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatCompaniesCall(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/companies"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatCompaniesValidateBeforeCall(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCompanies(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCompanies(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesCall(lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageLonLatCompanies(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageLonLatCompaniesWithHttpInfo(lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageLonLatCompaniesWithHttpInfo(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesValidateBeforeCall(lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatCompaniesAsync(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesValidateBeforeCall(lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatCompaniesAsyncRaw(BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesValidateBeforeCall(lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCompaniesRequestBuilder newCoverageLonLatCompaniesRequestBuilder() {
        return new CoverageLonLatCompaniesRequestBuilder(this);
    }

    public class CoverageLonLatCompaniesRequestBuilder {
        private CompaniesApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatCompaniesRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCompaniesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatCompaniesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageLonLatCompaniesAsync(this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCompaniesAsyncRaw(this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatCompaniesId
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatCompaniesIdCall(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/companies/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatCompaniesIdValidateBeforeCall(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCompaniesId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCompaniesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatCompaniesId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesIdCall(lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageLonLatCompaniesId(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageLonLatCompaniesIdWithHttpInfo(lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageLonLatCompaniesIdWithHttpInfo(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesIdValidateBeforeCall(lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatCompaniesIdAsync(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesIdValidateBeforeCall(lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatCompaniesIdAsyncRaw(BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatCompaniesIdValidateBeforeCall(lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCompaniesIdRequestBuilder newCoverageLonLatCompaniesIdRequestBuilder() {
        return new CoverageLonLatCompaniesIdRequestBuilder(this);
    }

    public class CoverageLonLatCompaniesIdRequestBuilder {
        private CompaniesApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatCompaniesIdRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCompaniesIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatCompaniesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageLonLatCompaniesIdAsync(this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCompaniesIdAsyncRaw(this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCompanies
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriCompaniesCall(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/companies"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriCompaniesValidateBeforeCall(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCompanies(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCompanies(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCompanies(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesCall(lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageLonLatUriCompanies(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageLonLatUriCompaniesWithHttpInfo(lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageLonLatUriCompaniesWithHttpInfo(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesValidateBeforeCall(lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriCompaniesAsync(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesValidateBeforeCall(lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriCompaniesAsyncRaw(BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesValidateBeforeCall(lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCompaniesRequestBuilder newCoverageLonLatUriCompaniesRequestBuilder() {
        return new CoverageLonLatUriCompaniesRequestBuilder(this);
    }

    public class CoverageLonLatUriCompaniesRequestBuilder {
        private CompaniesApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatUriCompaniesRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCompaniesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriCompaniesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCompaniesAsync(this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCompaniesAsyncRaw(this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCompaniesId
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageLonLatUriCompaniesIdCall(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{lon};{lat}/{uri}/companies/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageLonLatUriCompaniesIdValidateBeforeCall(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCompaniesId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCompaniesId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCompaniesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriCompaniesId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesIdCall(lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageLonLatUriCompaniesId(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageLonLatUriCompaniesIdWithHttpInfo(lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageLonLatUriCompaniesIdWithHttpInfo(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesIdValidateBeforeCall(lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriCompaniesIdAsync(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesIdValidateBeforeCall(lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageLonLatUriCompaniesIdAsyncRaw(BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageLonLatUriCompaniesIdValidateBeforeCall(lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCompaniesIdRequestBuilder newCoverageLonLatUriCompaniesIdRequestBuilder() {
        return new CoverageLonLatUriCompaniesIdRequestBuilder(this);
    }

    public class CoverageLonLatUriCompaniesIdRequestBuilder {
        private CompaniesApi currentApi;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatUriCompaniesIdRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCompaniesIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriCompaniesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCompaniesIdAsync(this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCompaniesIdAsyncRaw(this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCompanies
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionCompaniesCall(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/companies"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCompaniesValidateBeforeCall(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCompanies(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesCall(region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageRegionCompanies(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageRegionCompaniesWithHttpInfo(region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageRegionCompaniesWithHttpInfo(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCompaniesValidateBeforeCall(region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCompaniesAsync(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesValidateBeforeCall(region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCompaniesAsyncRaw(String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesValidateBeforeCall(region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCompaniesRequestBuilder newCoverageRegionCompaniesRequestBuilder() {
        return new CoverageRegionCompaniesRequestBuilder(this);
    }

    public class CoverageRegionCompaniesRequestBuilder {
        private CompaniesApi currentApi;
        private String region;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionCompaniesRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCompaniesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionCompaniesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageRegionCompaniesAsync(this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCompaniesAsyncRaw(this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCompaniesId
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionCompaniesIdCall(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/companies/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCompaniesIdValidateBeforeCall(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCompaniesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionCompaniesId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesIdCall(region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageRegionCompaniesId(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageRegionCompaniesIdWithHttpInfo(region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageRegionCompaniesIdWithHttpInfo(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCompaniesIdValidateBeforeCall(region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCompaniesIdAsync(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesIdValidateBeforeCall(region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCompaniesIdAsyncRaw(String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCompaniesIdValidateBeforeCall(region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCompaniesIdRequestBuilder newCoverageRegionCompaniesIdRequestBuilder() {
        return new CoverageRegionCompaniesIdRequestBuilder(this);
    }

    public class CoverageRegionCompaniesIdRequestBuilder {
        private CompaniesApi currentApi;
        private String region;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionCompaniesIdRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCompaniesIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionCompaniesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageRegionCompaniesIdAsync(this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCompaniesIdAsyncRaw(this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCompanies
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriCompaniesCall(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/companies"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriCompaniesValidateBeforeCall(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCompanies(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCompanies(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesCall(region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageRegionUriCompanies(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageRegionUriCompaniesWithHttpInfo(region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageRegionUriCompaniesWithHttpInfo(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesValidateBeforeCall(region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCompaniesAsync(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesValidateBeforeCall(region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCompaniesAsyncRaw(String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesValidateBeforeCall(region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCompaniesRequestBuilder newCoverageRegionUriCompaniesRequestBuilder() {
        return new CoverageRegionUriCompaniesRequestBuilder(this);
    }

    public class CoverageRegionUriCompaniesRequestBuilder {
        private CompaniesApi currentApi;
        private String region;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionUriCompaniesRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCompaniesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriCompaniesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCompaniesAsync(this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCompaniesAsyncRaw(this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCompaniesId
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriCompaniesIdCall(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/companies/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriCompaniesIdValidateBeforeCall(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCompaniesId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCompaniesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriCompaniesId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesIdCall(region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Companies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Companies getCoverageRegionUriCompaniesId(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Companies> resp = getCoverageRegionUriCompaniesIdWithHttpInfo(region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Companies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Companies> getCoverageRegionUriCompaniesIdWithHttpInfo(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesIdValidateBeforeCall(region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCompaniesIdAsync(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Companies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesIdValidateBeforeCall(region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Companies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCompaniesIdAsyncRaw(String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCompaniesIdValidateBeforeCall(region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCompaniesIdRequestBuilder newCoverageRegionUriCompaniesIdRequestBuilder() {
        return new CoverageRegionUriCompaniesIdRequestBuilder(this);
    }

    public class CoverageRegionUriCompaniesIdRequestBuilder {
        private CompaniesApi currentApi;
        private String region;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionUriCompaniesIdRequestBuilder(CompaniesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCompaniesIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriCompaniesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Companies > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCompaniesIdAsync(this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCompaniesIdAsyncRaw(this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
}
