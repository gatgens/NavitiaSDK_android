/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.80.2
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.apis;

import com.kisio.navitia.sdk.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.expert.invokers.ApiException;
import com.kisio.navitia.sdk.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.expert.invokers.Configuration;
import com.kisio.navitia.sdk.expert.invokers.Pair;
import com.kisio.navitia.sdk.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import com.kisio.navitia.sdk.expert.models.RouteSchedules;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RouteSchedulesApi {
    private final ApiClient apiClient;

    public RouteSchedulesApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatUriRouteSchedules
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriRouteSchedulesCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/route_schedules"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriRouteSchedulesValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriRouteSchedules(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriRouteSchedules(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriRouteSchedules(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriRouteSchedulesCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return RouteSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected RouteSchedules getCoverageLonLatUriRouteSchedules(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<RouteSchedules> resp = getCoverageLonLatUriRouteSchedulesWithHttpInfo(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;RouteSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<RouteSchedules> getCoverageLonLatUriRouteSchedulesWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriRouteSchedulesAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<RouteSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriRouteSchedulesAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriRouteSchedulesRequestBuilder newCoverageLonLatUriRouteSchedulesRequestBuilder() {
        return new CoverageLonLatUriRouteSchedulesRequestBuilder(this);
    }

    public class CoverageLonLatUriRouteSchedulesRequestBuilder {
        private RouteSchedulesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageLonLatUriRouteSchedulesRequestBuilder(RouteSchedulesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriRouteSchedulesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriRouteSchedulesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageLonLatUriRouteSchedulesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<RouteSchedules > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriRouteSchedulesAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriRouteSchedulesAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriRouteSchedules
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriRouteSchedulesCall(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/route_schedules"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriRouteSchedulesValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriRouteSchedules(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriRouteSchedules(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriRouteSchedulesCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return RouteSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected RouteSchedules getCoverageRegionUriRouteSchedules(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<RouteSchedules> resp = getCoverageRegionUriRouteSchedulesWithHttpInfo(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;RouteSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<RouteSchedules> getCoverageRegionUriRouteSchedulesWithHttpInfo(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriRouteSchedulesAsync(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<RouteSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriRouteSchedulesAsyncRaw(String basePath, String debugUrl, String region, String uri, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriRouteSchedulesValidateBeforeCall(basePath, debugUrl, region, uri, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriRouteSchedulesRequestBuilder newCoverageRegionUriRouteSchedulesRequestBuilder() {
        return new CoverageRegionUriRouteSchedulesRequestBuilder(this);
    }

    public class CoverageRegionUriRouteSchedulesRequestBuilder {
        private RouteSchedulesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public CoverageRegionUriRouteSchedulesRequestBuilder(RouteSchedulesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriRouteSchedulesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriRouteSchedulesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public CoverageRegionUriRouteSchedulesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<RouteSchedules > callback) throws ApiException {
            return currentApi.getCoverageRegionUriRouteSchedulesAsync(basePath, debugUrl, this.region, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriRouteSchedulesAsyncRaw(basePath, debugUrl, this.region, this.uri, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getRouteSchedules
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getRouteSchedulesCall(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/route_schedules";

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (fromDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from_datetime", fromDatetime));
        if (untilDatetime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until_datetime", untilDatetime));
        if (duration != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "duration", duration));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (maxDateTimes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "max_date_times", maxDateTimes));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (calendar != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "calendar", calendar));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (itemsPerSchedule != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "items_per_schedule", itemsPerSchedule));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRouteSchedulesValidateBeforeCall(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = getRouteSchedulesCall(basePath, debugUrl, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return RouteSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected RouteSchedules getRouteSchedules(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        ApiResponse<RouteSchedules> resp = getRouteSchedulesWithHttpInfo(basePath, debugUrl, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;RouteSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<RouteSchedules> getRouteSchedulesWithHttpInfo(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getRouteSchedulesValidateBeforeCall(basePath, debugUrl, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getRouteSchedulesAsync(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<RouteSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getRouteSchedulesValidateBeforeCall(basePath, debugUrl, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param filter use to filter PT objects (optional)
     * @param fromDatetime The datetime from which you want the schedules (optional)
     * @param untilDatetime The datetime until which you want the schedules (optional)
     * @param duration Maximum duration between datetime and the retrieved stop time (optional, default to 86400)
     * @param depth The depth of your object (optional, default to 2)
     * @param count Number of schedules per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param maxDateTimes DEPRECATED, replaced by &#x60;items_per_schedule&#x60; (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param calendar Id of the calendar (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param showCodes show more identification codes (optional)
     * @param dataFreshness freshness of the data. base_schedule is the long term planned schedule. adapted_schedule is for planned ahead disruptions (strikes, maintenances, ...). realtime is to have the freshest possible data (optional)
     * @param itemsPerSchedule maximum number of date_times per schedule (optional, default to 10000)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getRouteSchedulesAsyncRaw(String basePath, String debugUrl, String filter, DateTime fromDatetime, DateTime untilDatetime, Integer duration, Integer depth, Integer count, Integer startPage, Integer maxDateTimes, List<String> forbiddenId, List<String> forbiddenUris, String calendar, Integer distance, Boolean showCodes, String dataFreshness, Integer itemsPerSchedule, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getRouteSchedulesValidateBeforeCall(basePath, debugUrl, filter, fromDatetime, untilDatetime, duration, depth, count, startPage, maxDateTimes, forbiddenId, forbiddenUris, calendar, distance, showCodes, dataFreshness, itemsPerSchedule, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public RouteSchedulesRequestBuilder newRouteSchedulesRequestBuilder() {
        return new RouteSchedulesRequestBuilder(this);
    }

    public class RouteSchedulesRequestBuilder {
        private RouteSchedulesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String filter;
        private DateTime fromDatetime;
        private DateTime untilDatetime;
        private Integer duration;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private Integer maxDateTimes;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String calendar;
        private Integer distance;
        private Boolean showCodes;
        private String dataFreshness;
        private Integer itemsPerSchedule;
        private Boolean disableGeojson;

        public RouteSchedulesRequestBuilder(RouteSchedulesApi currentApi) {
            this.currentApi = currentApi;
        }

        public RouteSchedulesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public RouteSchedulesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public RouteSchedulesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public RouteSchedulesRequestBuilder withFromDatetime(DateTime fromDatetime) {
            this.fromDatetime = fromDatetime;
            return this;
        }
        public RouteSchedulesRequestBuilder withUntilDatetime(DateTime untilDatetime) {
            this.untilDatetime = untilDatetime;
            return this;
        }
        public RouteSchedulesRequestBuilder withDuration(Integer duration) {
            this.duration = duration;
            return this;
        }
        public RouteSchedulesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public RouteSchedulesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public RouteSchedulesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public RouteSchedulesRequestBuilder withMaxDateTimes(Integer maxDateTimes) {
            this.maxDateTimes = maxDateTimes;
            return this;
        }
        public RouteSchedulesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public RouteSchedulesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public RouteSchedulesRequestBuilder withCalendar(String calendar) {
            this.calendar = calendar;
            return this;
        }
        public RouteSchedulesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public RouteSchedulesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public RouteSchedulesRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public RouteSchedulesRequestBuilder withItemsPerSchedule(Integer itemsPerSchedule) {
            this.itemsPerSchedule = itemsPerSchedule;
            return this;
        }
        public RouteSchedulesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<RouteSchedules > callback) throws ApiException {
            return currentApi.getRouteSchedulesAsync(basePath, debugUrl, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getRouteSchedulesAsyncRaw(basePath, debugUrl, this.filter, this.fromDatetime, this.untilDatetime, this.duration, this.depth, this.count, this.startPage, this.maxDateTimes, this.forbiddenId, this.forbiddenUris, this.calendar, this.distance, this.showCodes, this.dataFreshness, this.itemsPerSchedule, this.disableGeojson, callback);
        }
    }
}
