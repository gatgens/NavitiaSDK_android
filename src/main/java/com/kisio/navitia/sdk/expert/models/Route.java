/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.80.2
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.kisio.navitia.sdk.expert.models.Code;
import com.kisio.navitia.sdk.expert.models.Comment;
import com.kisio.navitia.sdk.expert.models.Line;
import com.kisio.navitia.sdk.expert.models.LinkSchema;
import com.kisio.navitia.sdk.expert.models.MultiLineStringSchema;
import com.kisio.navitia.sdk.expert.models.PhysicalMode;
import com.kisio.navitia.sdk.expert.models.Place;
import com.kisio.navitia.sdk.expert.models.StopPoint;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * Route
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.NavitiaSDKJavaClientCodegen", date = "2019-06-13T13:20:14.367+02:00")
public class Route implements Parcelable {
  @SerializedName("direction")
  private Place direction = null;

  @SerializedName("codes")
  private List<Code> codes = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("links")
  private List<LinkSchema> links = new ArrayList<LinkSchema>();

  @SerializedName("physical_modes")
  private List<PhysicalMode> physicalModes = null;

  /**
   * Gets or Sets isFrequence
   */
  public enum IsFrequenceEnum {
    @SerializedName("False")
    FALSE("False");

    private String value;

    IsFrequenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("is_frequence")
  private IsFrequenceEnum isFrequence = null;

  @SerializedName("comments")
  private List<Comment> comments = null;

  @SerializedName("direction_type")
  private String directionType = null;

  @SerializedName("geojson")
  private MultiLineStringSchema geojson = null;

  @SerializedName("stop_points")
  private List<StopPoint> stopPoints = null;

  @SerializedName("line")
  private Line line = null;

  @SerializedName("id")
  private String id = null;

  public Route direction(Place direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @ApiModelProperty(value = "")
  public Place getDirection() {
    return direction;
  }

  public void setDirection(Place direction) {
    this.direction = direction;
  }

  public Route codes(List<Code> codes) {
    this.codes = codes;
    return this;
  }

  public Route addCodesItem(Code codesItem) {
    if (this.codes == null) {
      this.codes = new ArrayList<Code>();
    }
    this.codes.add(codesItem);
    return this;
  }

   /**
   * Get codes
   * @return codes
  **/
  @ApiModelProperty(value = "")
  public List<Code> getCodes() {
    return codes;
  }

  public void setCodes(List<Code> codes) {
    this.codes = codes;
  }

  public Route name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the object
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the object")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Route links(List<LinkSchema> links) {
    this.links = links;
    return this;
  }

  public Route addLinksItem(LinkSchema linksItem) {
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(required = true, value = "")
  public List<LinkSchema> getLinks() {
    return links;
  }

  public void setLinks(List<LinkSchema> links) {
    this.links = links;
  }

  public Route physicalModes(List<PhysicalMode> physicalModes) {
    this.physicalModes = physicalModes;
    return this;
  }

  public Route addPhysicalModesItem(PhysicalMode physicalModesItem) {
    if (this.physicalModes == null) {
      this.physicalModes = new ArrayList<PhysicalMode>();
    }
    this.physicalModes.add(physicalModesItem);
    return this;
  }

   /**
   * Get physicalModes
   * @return physicalModes
  **/
  @ApiModelProperty(value = "")
  public List<PhysicalMode> getPhysicalModes() {
    return physicalModes;
  }

  public void setPhysicalModes(List<PhysicalMode> physicalModes) {
    this.physicalModes = physicalModes;
  }

  public Route isFrequence(IsFrequenceEnum isFrequence) {
    this.isFrequence = isFrequence;
    return this;
  }

   /**
   * Get isFrequence
   * @return isFrequence
  **/
  @ApiModelProperty(value = "")
  public IsFrequenceEnum getIsFrequence() {
    return isFrequence;
  }

  public void setIsFrequence(IsFrequenceEnum isFrequence) {
    this.isFrequence = isFrequence;
  }

  public Route comments(List<Comment> comments) {
    this.comments = comments;
    return this;
  }

  public Route addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comment>();
    }
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @ApiModelProperty(value = "")
  public List<Comment> getComments() {
    return comments;
  }

  public void setComments(List<Comment> comments) {
    this.comments = comments;
  }

  public Route directionType(String directionType) {
    this.directionType = directionType;
    return this;
  }

   /**
   * Get directionType
   * @return directionType
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDirectionType() {
    return directionType;
  }

  public void setDirectionType(String directionType) {
    this.directionType = directionType;
  }

  public Route geojson(MultiLineStringSchema geojson) {
    this.geojson = geojson;
    return this;
  }

   /**
   * Get geojson
   * @return geojson
  **/
  @ApiModelProperty(value = "")
  public MultiLineStringSchema getGeojson() {
    return geojson;
  }

  public void setGeojson(MultiLineStringSchema geojson) {
    this.geojson = geojson;
  }

  public Route stopPoints(List<StopPoint> stopPoints) {
    this.stopPoints = stopPoints;
    return this;
  }

  public Route addStopPointsItem(StopPoint stopPointsItem) {
    if (this.stopPoints == null) {
      this.stopPoints = new ArrayList<StopPoint>();
    }
    this.stopPoints.add(stopPointsItem);
    return this;
  }

   /**
   * Get stopPoints
   * @return stopPoints
  **/
  @ApiModelProperty(value = "")
  public List<StopPoint> getStopPoints() {
    return stopPoints;
  }

  public void setStopPoints(List<StopPoint> stopPoints) {
    this.stopPoints = stopPoints;
  }

  public Route line(Line line) {
    this.line = line;
    return this;
  }

   /**
   * Get line
   * @return line
  **/
  @ApiModelProperty(value = "")
  public Line getLine() {
    return line;
  }

  public void setLine(Line line) {
    this.line = line;
  }

  public Route id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the object
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Identifier of the object")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.direction, route.direction) &&
        Objects.equals(this.codes, route.codes) &&
        Objects.equals(this.name, route.name) &&
        Objects.equals(this.links, route.links) &&
        Objects.equals(this.physicalModes, route.physicalModes) &&
        Objects.equals(this.isFrequence, route.isFrequence) &&
        Objects.equals(this.comments, route.comments) &&
        Objects.equals(this.directionType, route.directionType) &&
        Objects.equals(this.geojson, route.geojson) &&
        Objects.equals(this.stopPoints, route.stopPoints) &&
        Objects.equals(this.line, route.line) &&
        Objects.equals(this.id, route.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, codes, name, links, physicalModes, isFrequence, comments, directionType, geojson, stopPoints, line, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    physicalModes: ").append(toIndentedString(physicalModes)).append("\n");
    sb.append("    isFrequence: ").append(toIndentedString(isFrequence)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    directionType: ").append(toIndentedString(directionType)).append("\n");
    sb.append("    geojson: ").append(toIndentedString(geojson)).append("\n");
    sb.append("    stopPoints: ").append(toIndentedString(stopPoints)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(direction);

    out.writeValue(codes);

    out.writeValue(name);

    out.writeValue(links);

    out.writeValue(physicalModes);

    out.writeValue(isFrequence);

    out.writeValue(comments);

    out.writeValue(directionType);

    out.writeValue(geojson);

    out.writeValue(stopPoints);

    out.writeValue(line);

    out.writeValue(id);
  }

  public Route() {
    super();
  }

  Route(Parcel in) {
    
    direction = (Place)in.readValue(Place.class.getClassLoader());
    codes = (List<Code>)in.readValue(Code.class.getClassLoader());
    name = (String)in.readValue(null);
    links = (List<LinkSchema>)in.readValue(LinkSchema.class.getClassLoader());
    physicalModes = (List<PhysicalMode>)in.readValue(PhysicalMode.class.getClassLoader());
    isFrequence = (IsFrequenceEnum)in.readValue(null);
    comments = (List<Comment>)in.readValue(Comment.class.getClassLoader());
    directionType = (String)in.readValue(null);
    geojson = (MultiLineStringSchema)in.readValue(MultiLineStringSchema.class.getClassLoader());
    stopPoints = (List<StopPoint>)in.readValue(StopPoint.class.getClassLoader());
    line = (Line)in.readValue(Line.class.getClassLoader());
    id = (String)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<Route> CREATOR = new Parcelable.Creator<Route>() {
    public Route createFromParcel(Parcel in) {
      return new Route(in);
    }
    public Route[] newArray(int size) {
      return new Route[size];
    }
  };
}

