/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.78.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.kisio.navitia.sdk.expert.models.CommercialMode;
import com.kisio.navitia.sdk.expert.models.Line;
import com.kisio.navitia.sdk.expert.models.Network;
import com.kisio.navitia.sdk.expert.models.Route;
import com.kisio.navitia.sdk.expert.models.StopArea;
import com.kisio.navitia.sdk.expert.models.StopPoint;
import com.kisio.navitia.sdk.expert.models.Trip;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * PtObject
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.NavitiaSDKJavaClientCodegen", date = "2019-05-16T14:17:49.415+02:00")
public class PtObject implements Parcelable {
  /**
   * Gets or Sets embeddedType
   */
  public enum EmbeddedTypeEnum {
    @SerializedName("line")
    LINE("line"),
    
    @SerializedName("journey_pattern")
    JOURNEY_PATTERN("journey_pattern"),
    
    @SerializedName("vehicle_journey")
    VEHICLE_JOURNEY("vehicle_journey"),
    
    @SerializedName("stop_point")
    STOP_POINT("stop_point"),
    
    @SerializedName("stop_area")
    STOP_AREA("stop_area"),
    
    @SerializedName("network")
    NETWORK("network"),
    
    @SerializedName("physical_mode")
    PHYSICAL_MODE("physical_mode"),
    
    @SerializedName("commercial_mode")
    COMMERCIAL_MODE("commercial_mode"),
    
    @SerializedName("connection")
    CONNECTION("connection"),
    
    @SerializedName("journey_pattern_point")
    JOURNEY_PATTERN_POINT("journey_pattern_point"),
    
    @SerializedName("company")
    COMPANY("company"),
    
    @SerializedName("route")
    ROUTE("route"),
    
    @SerializedName("poi")
    POI("poi"),
    
    @SerializedName("contributor")
    CONTRIBUTOR("contributor"),
    
    @SerializedName("address")
    ADDRESS("address"),
    
    @SerializedName("poitype")
    POITYPE("poitype"),
    
    @SerializedName("administrative_region")
    ADMINISTRATIVE_REGION("administrative_region"),
    
    @SerializedName("calendar")
    CALENDAR("calendar"),
    
    @SerializedName("line_group")
    LINE_GROUP("line_group"),
    
    @SerializedName("impact")
    IMPACT("impact"),
    
    @SerializedName("dataset")
    DATASET("dataset"),
    
    @SerializedName("trip")
    TRIP("trip");

    private String value;

    EmbeddedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("embedded_type")
  private EmbeddedTypeEnum embeddedType = null;

  @SerializedName("stop_point")
  private StopPoint stopPoint = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("route")
  private Route route = null;

  @SerializedName("stop_area")
  private StopArea stopArea = null;

  @SerializedName("commercial_mode")
  private CommercialMode commercialMode = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("line")
  private Line line = null;

  @SerializedName("quality")
  private Integer quality = null;

  @SerializedName("trip")
  private Trip trip = null;

  @SerializedName("network")
  private Network network = null;

  public PtObject embeddedType(EmbeddedTypeEnum embeddedType) {
    this.embeddedType = embeddedType;
    return this;
  }

   /**
   * Get embeddedType
   * @return embeddedType
  **/
  @ApiModelProperty(required = true, value = "")
  public EmbeddedTypeEnum getEmbeddedType() {
    return embeddedType;
  }

  public void setEmbeddedType(EmbeddedTypeEnum embeddedType) {
    this.embeddedType = embeddedType;
  }

  public PtObject stopPoint(StopPoint stopPoint) {
    this.stopPoint = stopPoint;
    return this;
  }

   /**
   * Get stopPoint
   * @return stopPoint
  **/
  @ApiModelProperty(value = "")
  public StopPoint getStopPoint() {
    return stopPoint;
  }

  public void setStopPoint(StopPoint stopPoint) {
    this.stopPoint = stopPoint;
  }

  public PtObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the object
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the object")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PtObject route(Route route) {
    this.route = route;
    return this;
  }

   /**
   * Get route
   * @return route
  **/
  @ApiModelProperty(value = "")
  public Route getRoute() {
    return route;
  }

  public void setRoute(Route route) {
    this.route = route;
  }

  public PtObject stopArea(StopArea stopArea) {
    this.stopArea = stopArea;
    return this;
  }

   /**
   * Get stopArea
   * @return stopArea
  **/
  @ApiModelProperty(value = "")
  public StopArea getStopArea() {
    return stopArea;
  }

  public void setStopArea(StopArea stopArea) {
    this.stopArea = stopArea;
  }

  public PtObject commercialMode(CommercialMode commercialMode) {
    this.commercialMode = commercialMode;
    return this;
  }

   /**
   * Get commercialMode
   * @return commercialMode
  **/
  @ApiModelProperty(value = "")
  public CommercialMode getCommercialMode() {
    return commercialMode;
  }

  public void setCommercialMode(CommercialMode commercialMode) {
    this.commercialMode = commercialMode;
  }

  public PtObject id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the object
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Identifier of the object")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PtObject line(Line line) {
    this.line = line;
    return this;
  }

   /**
   * Get line
   * @return line
  **/
  @ApiModelProperty(value = "")
  public Line getLine() {
    return line;
  }

  public void setLine(Line line) {
    this.line = line;
  }

  public PtObject quality(Integer quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Get quality
   * @return quality
  **/
  @ApiModelProperty(value = "")
  public Integer getQuality() {
    return quality;
  }

  public void setQuality(Integer quality) {
    this.quality = quality;
  }

  public PtObject trip(Trip trip) {
    this.trip = trip;
    return this;
  }

   /**
   * Get trip
   * @return trip
  **/
  @ApiModelProperty(value = "")
  public Trip getTrip() {
    return trip;
  }

  public void setTrip(Trip trip) {
    this.trip = trip;
  }

  public PtObject network(Network network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(value = "")
  public Network getNetwork() {
    return network;
  }

  public void setNetwork(Network network) {
    this.network = network;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtObject ptObject = (PtObject) o;
    return Objects.equals(this.embeddedType, ptObject.embeddedType) &&
        Objects.equals(this.stopPoint, ptObject.stopPoint) &&
        Objects.equals(this.name, ptObject.name) &&
        Objects.equals(this.route, ptObject.route) &&
        Objects.equals(this.stopArea, ptObject.stopArea) &&
        Objects.equals(this.commercialMode, ptObject.commercialMode) &&
        Objects.equals(this.id, ptObject.id) &&
        Objects.equals(this.line, ptObject.line) &&
        Objects.equals(this.quality, ptObject.quality) &&
        Objects.equals(this.trip, ptObject.trip) &&
        Objects.equals(this.network, ptObject.network);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embeddedType, stopPoint, name, route, stopArea, commercialMode, id, line, quality, trip, network);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtObject {\n");
    
    sb.append("    embeddedType: ").append(toIndentedString(embeddedType)).append("\n");
    sb.append("    stopPoint: ").append(toIndentedString(stopPoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    stopArea: ").append(toIndentedString(stopArea)).append("\n");
    sb.append("    commercialMode: ").append(toIndentedString(commercialMode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    trip: ").append(toIndentedString(trip)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(embeddedType);

    out.writeValue(stopPoint);

    out.writeValue(name);

    out.writeValue(route);

    out.writeValue(stopArea);

    out.writeValue(commercialMode);

    out.writeValue(id);

    out.writeValue(line);

    out.writeValue(quality);

    out.writeValue(trip);

    out.writeValue(network);
  }

  public PtObject() {
    super();
  }

  PtObject(Parcel in) {
    
    embeddedType = (EmbeddedTypeEnum)in.readValue(null);
    stopPoint = (StopPoint)in.readValue(StopPoint.class.getClassLoader());
    name = (String)in.readValue(null);
    route = (Route)in.readValue(Route.class.getClassLoader());
    stopArea = (StopArea)in.readValue(StopArea.class.getClassLoader());
    commercialMode = (CommercialMode)in.readValue(CommercialMode.class.getClassLoader());
    id = (String)in.readValue(null);
    line = (Line)in.readValue(Line.class.getClassLoader());
    quality = (Integer)in.readValue(null);
    trip = (Trip)in.readValue(Trip.class.getClassLoader());
    network = (Network)in.readValue(Network.class.getClassLoader());
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<PtObject> CREATOR = new Parcelable.Creator<PtObject>() {
    public PtObject createFromParcel(Parcel in) {
      return new PtObject(in);
    }
    public PtObject[] newArray(int size) {
      return new PtObject[size];
    }
  };
}

