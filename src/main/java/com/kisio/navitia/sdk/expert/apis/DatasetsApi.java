/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.80.2-3-g25474e0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.apis;

import com.kisio.navitia.sdk.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.expert.invokers.ApiException;
import com.kisio.navitia.sdk.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.expert.invokers.Configuration;
import com.kisio.navitia.sdk.expert.invokers.Pair;
import com.kisio.navitia.sdk.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.expert.models.Datasets;
import org.joda.time.DateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetsApi {
    private final ApiClient apiClient;

    public DatasetsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatDatasets
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatDatasetsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/datasets"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatDatasetsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatDatasets(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatDatasets(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatDatasetsCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageLonLatDatasets(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageLonLatDatasetsWithHttpInfo(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageLonLatDatasetsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatDatasetsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatDatasetsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatDatasetsRequestBuilder newCoverageLonLatDatasetsRequestBuilder() {
        return new CoverageLonLatDatasetsRequestBuilder(this);
    }

    public class CoverageLonLatDatasetsRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatDatasetsRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatDatasetsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatDatasetsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatDatasetsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageLonLatDatasetsAsync(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatDatasetsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatDatasetsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatDatasetsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/datasets/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatDatasetsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatDatasetsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatDatasetsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatDatasetsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatDatasetsIdCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageLonLatDatasetsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageLonLatDatasetsIdWithHttpInfo(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageLonLatDatasetsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatDatasetsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatDatasetsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatDatasetsIdRequestBuilder newCoverageLonLatDatasetsIdRequestBuilder() {
        return new CoverageLonLatDatasetsIdRequestBuilder(this);
    }

    public class CoverageLonLatDatasetsIdRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatDatasetsIdRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatDatasetsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatDatasetsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatDatasetsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageLonLatDatasetsIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatDatasetsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriDatasets
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriDatasetsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/datasets"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriDatasetsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriDatasets(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriDatasets(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriDatasets(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriDatasetsCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageLonLatUriDatasets(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageLonLatUriDatasetsWithHttpInfo(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageLonLatUriDatasetsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriDatasetsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriDatasetsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriDatasetsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriDatasetsRequestBuilder newCoverageLonLatUriDatasetsRequestBuilder() {
        return new CoverageLonLatUriDatasetsRequestBuilder(this);
    }

    public class CoverageLonLatUriDatasetsRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatUriDatasetsRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriDatasetsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriDatasetsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriDatasetsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDatasetsAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDatasetsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriDatasetsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriDatasetsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/datasets/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriDatasetsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriDatasetsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriDatasetsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriDatasetsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriDatasetsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriDatasetsIdCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageLonLatUriDatasetsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageLonLatUriDatasetsIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageLonLatUriDatasetsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriDatasetsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriDatasetsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriDatasetsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriDatasetsIdRequestBuilder newCoverageLonLatUriDatasetsIdRequestBuilder() {
        return new CoverageLonLatUriDatasetsIdRequestBuilder(this);
    }

    public class CoverageLonLatUriDatasetsIdRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatUriDatasetsIdRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriDatasetsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriDatasetsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriDatasetsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDatasetsIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriDatasetsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionDatasets
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionDatasetsCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/datasets"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionDatasetsValidateBeforeCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionDatasets(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionDatasetsCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageRegionDatasets(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageRegionDatasetsWithHttpInfo(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageRegionDatasetsWithHttpInfo(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionDatasetsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionDatasetsAsync(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionDatasetsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionDatasetsAsyncRaw(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionDatasetsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionDatasetsRequestBuilder newCoverageRegionDatasetsRequestBuilder() {
        return new CoverageRegionDatasetsRequestBuilder(this);
    }

    public class CoverageRegionDatasetsRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionDatasetsRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionDatasetsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionDatasetsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionDatasetsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageRegionDatasetsAsync(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionDatasetsAsyncRaw(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionDatasetsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionDatasetsIdCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/datasets/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionDatasetsIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionDatasetsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionDatasetsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionDatasetsIdCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageRegionDatasetsId(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageRegionDatasetsIdWithHttpInfo(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageRegionDatasetsIdWithHttpInfo(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionDatasetsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionDatasetsIdAsync(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionDatasetsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionDatasetsIdAsyncRaw(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionDatasetsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionDatasetsIdRequestBuilder newCoverageRegionDatasetsIdRequestBuilder() {
        return new CoverageRegionDatasetsIdRequestBuilder(this);
    }

    public class CoverageRegionDatasetsIdRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionDatasetsIdRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionDatasetsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionDatasetsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionDatasetsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageRegionDatasetsIdAsync(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionDatasetsIdAsyncRaw(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriDatasets
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriDatasetsCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/datasets"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriDatasetsValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriDatasets(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriDatasets(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriDatasetsCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageRegionUriDatasets(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageRegionUriDatasetsWithHttpInfo(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageRegionUriDatasetsWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriDatasetsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriDatasetsAsync(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriDatasetsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriDatasetsAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriDatasetsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriDatasetsRequestBuilder newCoverageRegionUriDatasetsRequestBuilder() {
        return new CoverageRegionUriDatasetsRequestBuilder(this);
    }

    public class CoverageRegionUriDatasetsRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionUriDatasetsRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriDatasetsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriDatasetsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriDatasetsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDatasetsAsync(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDatasetsAsyncRaw(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriDatasetsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriDatasetsIdCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/datasets/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriDatasetsIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriDatasetsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriDatasetsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriDatasetsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriDatasetsIdCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return Datasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Datasets getCoverageRegionUriDatasetsId(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<Datasets> resp = getCoverageRegionUriDatasetsIdWithHttpInfo(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;Datasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Datasets> getCoverageRegionUriDatasetsIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriDatasetsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriDatasetsIdAsync(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<Datasets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriDatasetsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Datasets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriDatasetsIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriDatasetsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriDatasetsIdRequestBuilder newCoverageRegionUriDatasetsIdRequestBuilder() {
        return new CoverageRegionUriDatasetsIdRequestBuilder(this);
    }

    public class CoverageRegionUriDatasetsIdRequestBuilder {
        private DatasetsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionUriDatasetsIdRequestBuilder(DatasetsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriDatasetsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriDatasetsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriDatasetsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Datasets > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDatasetsIdAsync(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriDatasetsIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
}
