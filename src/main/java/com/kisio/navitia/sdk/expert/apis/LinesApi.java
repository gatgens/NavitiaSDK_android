/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.80.2-3-g25474e0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.apis;

import com.kisio.navitia.sdk.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.expert.invokers.ApiException;
import com.kisio.navitia.sdk.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.expert.invokers.Configuration;
import com.kisio.navitia.sdk.expert.invokers.Pair;
import com.kisio.navitia.sdk.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import com.kisio.navitia.sdk.expert.models.Lines;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinesApi {
    private final ApiClient apiClient;

    public LinesApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatLines
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatLinesCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/lines"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatLinesValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatLines(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatLines(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatLinesCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageLonLatLines(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageLonLatLinesWithHttpInfo(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageLonLatLinesWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageLonLatLinesValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatLinesAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatLinesValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatLinesAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatLinesValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatLinesRequestBuilder newCoverageLonLatLinesRequestBuilder() {
        return new CoverageLonLatLinesRequestBuilder(this);
    }

    public class CoverageLonLatLinesRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;
        private String originalId;

        public CoverageLonLatLinesRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatLinesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatLinesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageLonLatLinesRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageLonLatLinesAsync(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatLinesAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatLinesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatLinesIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/lines/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatLinesIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatLinesId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatLinesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatLinesId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatLinesIdCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageLonLatLinesId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageLonLatLinesIdWithHttpInfo(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageLonLatLinesIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageLonLatLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatLinesIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatLinesIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatLinesIdRequestBuilder newCoverageLonLatLinesIdRequestBuilder() {
        return new CoverageLonLatLinesIdRequestBuilder(this);
    }

    public class CoverageLonLatLinesIdRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;
        private String originalId;

        public CoverageLonLatLinesIdRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatLinesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatLinesIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageLonLatLinesIdRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageLonLatLinesIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatLinesIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriLines
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriLinesCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/lines"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriLinesValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriLines(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriLines(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriLines(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriLinesCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageLonLatUriLines(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageLonLatUriLinesWithHttpInfo(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageLonLatUriLinesWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriLinesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriLinesAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriLinesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriLinesAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriLinesValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriLinesRequestBuilder newCoverageLonLatUriLinesRequestBuilder() {
        return new CoverageLonLatUriLinesRequestBuilder(this);
    }

    public class CoverageLonLatUriLinesRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;
        private String originalId;

        public CoverageLonLatUriLinesRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriLinesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriLinesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageLonLatUriLinesRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLinesAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLinesAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriLinesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriLinesIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/lines/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriLinesIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriLinesId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriLinesId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriLinesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriLinesId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriLinesIdCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageLonLatUriLinesId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageLonLatUriLinesIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageLonLatUriLinesIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriLinesIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriLinesIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriLinesIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriLinesIdRequestBuilder newCoverageLonLatUriLinesIdRequestBuilder() {
        return new CoverageLonLatUriLinesIdRequestBuilder(this);
    }

    public class CoverageLonLatUriLinesIdRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;
        private String originalId;

        public CoverageLonLatUriLinesIdRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriLinesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriLinesIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageLonLatUriLinesIdRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLinesIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriLinesIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageRegionLines
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionLinesCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/lines"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionLinesValidateBeforeCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionLines(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionLinesCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageRegionLines(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageRegionLinesWithHttpInfo(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageRegionLinesWithHttpInfo(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageRegionLinesValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionLinesAsync(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionLinesValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionLinesAsyncRaw(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionLinesValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionLinesRequestBuilder newCoverageRegionLinesRequestBuilder() {
        return new CoverageRegionLinesRequestBuilder(this);
    }

    public class CoverageRegionLinesRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;
        private String originalId;

        public CoverageRegionLinesRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionLinesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionLinesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageRegionLinesRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageRegionLinesAsync(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionLinesAsyncRaw(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageRegionLinesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionLinesIdCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/lines/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionLinesIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionLinesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionLinesId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionLinesIdCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageRegionLinesId(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageRegionLinesIdWithHttpInfo(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageRegionLinesIdWithHttpInfo(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageRegionLinesIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionLinesIdAsync(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionLinesIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionLinesIdAsyncRaw(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionLinesIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionLinesIdRequestBuilder newCoverageRegionLinesIdRequestBuilder() {
        return new CoverageRegionLinesIdRequestBuilder(this);
    }

    public class CoverageRegionLinesIdRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;
        private String originalId;

        public CoverageRegionLinesIdRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionLinesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionLinesIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageRegionLinesIdRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageRegionLinesIdAsync(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionLinesIdAsyncRaw(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriLines
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriLinesCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/lines"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriLinesValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriLines(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriLines(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriLinesCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageRegionUriLines(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageRegionUriLinesWithHttpInfo(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageRegionUriLinesWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriLinesValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriLinesAsync(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriLinesValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriLinesAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriLinesValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriLinesRequestBuilder newCoverageRegionUriLinesRequestBuilder() {
        return new CoverageRegionUriLinesRequestBuilder(this);
    }

    public class CoverageRegionUriLinesRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;
        private String originalId;

        public CoverageRegionUriLinesRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriLinesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriLinesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageRegionUriLinesRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLinesAsync(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLinesAsyncRaw(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriLinesId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriLinesIdCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/lines/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriLinesIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriLinesId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriLinesId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriLinesId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriLinesIdCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getCoverageRegionUriLinesId(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getCoverageRegionUriLinesIdWithHttpInfo(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getCoverageRegionUriLinesIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriLinesIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriLinesIdAsync(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriLinesIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriLinesIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriLinesIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriLinesIdRequestBuilder newCoverageRegionUriLinesIdRequestBuilder() {
        return new CoverageRegionUriLinesIdRequestBuilder(this);
    }

    public class CoverageRegionUriLinesIdRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;
        private String originalId;

        public CoverageRegionUriLinesIdRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriLinesIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriLinesIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public CoverageRegionUriLinesIdRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLinesIdAsync(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriLinesIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, this.originalId, callback);
        }
    }
    /**
     * Build call for getLines
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getLinesCall(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/lines";

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));
        if (originalId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_id", originalId));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinesValidateBeforeCall(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalCode' is set
        if (externalCode == null) {
            throw new ApiException("Missing the required parameter 'externalCode' when calling getLines(Async)");
        }
        

        okhttp3.Call call = getLinesCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return Lines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Lines getLines(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        ApiResponse<Lines> resp = getLinesWithHttpInfo(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @return ApiResponse&lt;Lines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Lines> getLinesWithHttpInfo(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId) throws ApiException {
        okhttp3.Call call = getLinesValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, null, null);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getLinesAsync(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<Lines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getLinesValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Lines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param externalCode An external code to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param originalId original uri of the object you want to query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getLinesAsyncRaw(String basePath, String debugUrl, String externalCode, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String headsign, Boolean showCodes, String odtLevel, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, String originalId, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getLinesValidateBeforeCall(basePath, debugUrl, externalCode, startPage, count, depth, forbiddenId, forbiddenUris, headsign, showCodes, odtLevel, distance, since, until, disableGeojson, disableDisruption, filter, tags, originalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public LinesRequestBuilder newLinesRequestBuilder() {
        return new LinesRequestBuilder(this);
    }

    public class LinesRequestBuilder {
        private LinesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String externalCode;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;
        private String originalId;

        public LinesRequestBuilder(LinesApi currentApi) {
            this.currentApi = currentApi;
        }

        public LinesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public LinesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public LinesRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public LinesRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public LinesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public LinesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public LinesRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public LinesRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public LinesRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public LinesRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public LinesRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public LinesRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public LinesRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public LinesRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public LinesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public LinesRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public LinesRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public LinesRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        public LinesRequestBuilder withOriginalId(String originalId) {
            this.originalId = originalId;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Lines > callback) throws ApiException {
            return currentApi.getLinesAsync(basePath, debugUrl, this.externalCode, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getLinesAsyncRaw(basePath, debugUrl, this.externalCode, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.headsign, this.showCodes, this.odtLevel, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, this.originalId, callback);
        }
    }
}
