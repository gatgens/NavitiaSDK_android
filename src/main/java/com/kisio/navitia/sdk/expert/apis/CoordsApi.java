/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.78.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.apis;

import com.kisio.navitia.sdk.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.expert.invokers.ApiException;
import com.kisio.navitia.sdk.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.expert.invokers.Configuration;
import com.kisio.navitia.sdk.expert.invokers.Pair;
import com.kisio.navitia.sdk.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.expert.models.DictAddresses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CoordsApi {
    private ApiClient apiClient;

    public CoordsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatCoord
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatCoordCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/coord"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatCoordValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCoord(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCoord(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatCoordCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatCoord(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatCoordWithHttpInfo(basePath, debugUrl, lat, lon);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatCoordWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon) throws ApiException {
        okhttp3.Call call = getCoverageLonLatCoordValidateBeforeCall(basePath, debugUrl, lat, lon, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordValidateBeforeCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordValidateBeforeCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCoordRequestBuilder newCoverageLonLatCoordRequestBuilder() {
        return new CoverageLonLatCoordRequestBuilder(this);
    }

    public class CoverageLonLatCoordRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;

        public CoverageLonLatCoordRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCoordRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatCoordRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatCoordRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCoordRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordAsync(basePath, debugUrl, this.lat, this.lon, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordAsyncRaw(basePath, debugUrl, this.lat, this.lon, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatCoordId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatCoordIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/coord/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatCoordIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCoordId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCoordId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatCoordId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatCoordIdCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatCoordId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatCoordIdWithHttpInfo(basePath, debugUrl, lat, lon, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatCoordIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id) throws ApiException {
        okhttp3.Call call = getCoverageLonLatCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCoordIdRequestBuilder newCoverageLonLatCoordIdRequestBuilder() {
        return new CoverageLonLatCoordIdRequestBuilder(this);
    }

    public class CoverageLonLatCoordIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;

        public CoverageLonLatCoordIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCoordIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatCoordIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatCoordIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCoordIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatCoordIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatCoords
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatCoordsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/coords"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatCoordsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCoords(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCoords(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatCoordsCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatCoords(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatCoordsWithHttpInfo(basePath, debugUrl, lat, lon);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatCoordsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon) throws ApiException {
        okhttp3.Call call = getCoverageLonLatCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCoordsRequestBuilder newCoverageLonLatCoordsRequestBuilder() {
        return new CoverageLonLatCoordsRequestBuilder(this);
    }

    public class CoverageLonLatCoordsRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;

        public CoverageLonLatCoordsRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCoordsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatCoordsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatCoordsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCoordsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordsAsync(basePath, debugUrl, this.lat, this.lon, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordsAsyncRaw(basePath, debugUrl, this.lat, this.lon, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatCoordsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatCoordsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/coords/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatCoordsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatCoordsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatCoordsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatCoordsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatCoordsIdCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatCoordsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatCoordsIdWithHttpInfo(basePath, debugUrl, lat, lon, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatCoordsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id) throws ApiException {
        okhttp3.Call call = getCoverageLonLatCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatCoordsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatCoordsIdRequestBuilder newCoverageLonLatCoordsIdRequestBuilder() {
        return new CoverageLonLatCoordsIdRequestBuilder(this);
    }

    public class CoverageLonLatCoordsIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;

        public CoverageLonLatCoordsIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatCoordsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatCoordsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatCoordsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatCoordsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatCoordsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordsIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatCoordsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCoord
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriCoordCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/coord"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriCoordValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCoord(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCoord(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCoord(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriCoordCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatUriCoord(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatUriCoordWithHttpInfo(basePath, debugUrl, lat, lon, uri);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatUriCoordWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriCoordValidateBeforeCall(basePath, debugUrl, lat, lon, uri, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordValidateBeforeCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordValidateBeforeCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCoordRequestBuilder newCoverageLonLatUriCoordRequestBuilder() {
        return new CoverageLonLatUriCoordRequestBuilder(this);
    }

    public class CoverageLonLatUriCoordRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;

        public CoverageLonLatUriCoordRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCoordRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriCoordRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriCoordRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCoordRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCoordRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordAsync(basePath, debugUrl, this.lat, this.lon, this.uri, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCoordId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriCoordIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/coord/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriCoordIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCoordId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCoordId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCoordId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriCoordId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriCoordIdCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatUriCoordId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatUriCoordIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatUriCoordIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCoordIdRequestBuilder newCoverageLonLatUriCoordIdRequestBuilder() {
        return new CoverageLonLatUriCoordIdRequestBuilder(this);
    }

    public class CoverageLonLatUriCoordIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;

        public CoverageLonLatUriCoordIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCoordIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriCoordIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriCoordIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCoordIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCoordIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriCoordIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCoords
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriCoordsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/coords"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriCoordsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCoords(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCoords(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCoords(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriCoordsCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatUriCoords(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatUriCoordsWithHttpInfo(basePath, debugUrl, lat, lon, uri);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatUriCoordsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCoordsRequestBuilder newCoverageLonLatUriCoordsRequestBuilder() {
        return new CoverageLonLatUriCoordsRequestBuilder(this);
    }

    public class CoverageLonLatUriCoordsRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;

        public CoverageLonLatUriCoordsRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCoordsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriCoordsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriCoordsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCoordsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCoordsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordsAsync(basePath, debugUrl, this.lat, this.lon, this.uri, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriCoordsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriCoordsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/coords/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriCoordsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriCoordsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriCoordsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriCoordsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriCoordsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriCoordsIdCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageLonLatUriCoordsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageLonLatUriCoordsIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageLonLatUriCoordsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriCoordsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatUriCoordsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriCoordsIdRequestBuilder newCoverageLonLatUriCoordsIdRequestBuilder() {
        return new CoverageLonLatUriCoordsIdRequestBuilder(this);
    }

    public class CoverageLonLatUriCoordsIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;

        public CoverageLonLatUriCoordsIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriCoordsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriCoordsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriCoordsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriCoordsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriCoordsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriCoordsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordsIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriCoordsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCoord
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionCoordCall(String basePath, String debugUrl, String region, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/coord"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionCoordValidateBeforeCall(String basePath, String debugUrl, String region, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCoord(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionCoordCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionCoord(String basePath, String debugUrl, String region) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionCoordWithHttpInfo(basePath, debugUrl, region);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionCoordWithHttpInfo(String basePath, String debugUrl, String region) throws ApiException {
        okhttp3.Call call = getCoverageRegionCoordValidateBeforeCall(basePath, debugUrl, region, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordAsync(String basePath, String debugUrl, String region, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordValidateBeforeCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordAsyncRaw(String basePath, String debugUrl, String region, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordValidateBeforeCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCoordRequestBuilder newCoverageRegionCoordRequestBuilder() {
        return new CoverageRegionCoordRequestBuilder(this);
    }

    public class CoverageRegionCoordRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;

        public CoverageRegionCoordRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCoordRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionCoordRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionCoordRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordAsync(basePath, debugUrl, this.region, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordAsyncRaw(basePath, debugUrl, this.region, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCoordId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionCoordIdCall(String basePath, String debugUrl, String region, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/coord/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionCoordIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCoordId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionCoordId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionCoordIdCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionCoordId(String basePath, String debugUrl, String region, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionCoordIdWithHttpInfo(basePath, debugUrl, region, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionCoordIdWithHttpInfo(String basePath, String debugUrl, String region, String id) throws ApiException {
        okhttp3.Call call = getCoverageRegionCoordIdValidateBeforeCall(basePath, debugUrl, region, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordIdAsync(String basePath, String debugUrl, String region, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordIdValidateBeforeCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordIdAsyncRaw(String basePath, String debugUrl, String region, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordIdValidateBeforeCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCoordIdRequestBuilder newCoverageRegionCoordIdRequestBuilder() {
        return new CoverageRegionCoordIdRequestBuilder(this);
    }

    public class CoverageRegionCoordIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;

        public CoverageRegionCoordIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCoordIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionCoordIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionCoordIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCoordIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordIdAsync(basePath, debugUrl, this.region, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordIdAsyncRaw(basePath, debugUrl, this.region, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCoords
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionCoordsCall(String basePath, String debugUrl, String region, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/coords"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionCoordsValidateBeforeCall(String basePath, String debugUrl, String region, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCoords(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionCoordsCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionCoords(String basePath, String debugUrl, String region) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionCoordsWithHttpInfo(basePath, debugUrl, region);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionCoordsWithHttpInfo(String basePath, String debugUrl, String region) throws ApiException {
        okhttp3.Call call = getCoverageRegionCoordsValidateBeforeCall(basePath, debugUrl, region, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordsAsync(String basePath, String debugUrl, String region, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordsValidateBeforeCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordsAsyncRaw(String basePath, String debugUrl, String region, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordsValidateBeforeCall(basePath, debugUrl, region, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCoordsRequestBuilder newCoverageRegionCoordsRequestBuilder() {
        return new CoverageRegionCoordsRequestBuilder(this);
    }

    public class CoverageRegionCoordsRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;

        public CoverageRegionCoordsRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCoordsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionCoordsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionCoordsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordsAsync(basePath, debugUrl, this.region, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordsAsyncRaw(basePath, debugUrl, this.region, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCoordsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionCoordsIdCall(String basePath, String debugUrl, String region, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/coords/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionCoordsIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCoordsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionCoordsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionCoordsIdCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionCoordsId(String basePath, String debugUrl, String region, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionCoordsIdWithHttpInfo(basePath, debugUrl, region, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionCoordsIdWithHttpInfo(String basePath, String debugUrl, String region, String id) throws ApiException {
        okhttp3.Call call = getCoverageRegionCoordsIdValidateBeforeCall(basePath, debugUrl, region, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordsIdAsync(String basePath, String debugUrl, String region, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordsIdValidateBeforeCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionCoordsIdAsyncRaw(String basePath, String debugUrl, String region, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionCoordsIdValidateBeforeCall(basePath, debugUrl, region, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCoordsIdRequestBuilder newCoverageRegionCoordsIdRequestBuilder() {
        return new CoverageRegionCoordsIdRequestBuilder(this);
    }

    public class CoverageRegionCoordsIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;

        public CoverageRegionCoordsIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCoordsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionCoordsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionCoordsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCoordsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordsIdAsync(basePath, debugUrl, this.region, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCoordsIdAsyncRaw(basePath, debugUrl, this.region, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCoord
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriCoordCall(String basePath, String debugUrl, String region, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/coord"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriCoordValidateBeforeCall(String basePath, String debugUrl, String region, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCoord(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCoord(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriCoordCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionUriCoord(String basePath, String debugUrl, String region, String uri) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionUriCoordWithHttpInfo(basePath, debugUrl, region, uri);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionUriCoordWithHttpInfo(String basePath, String debugUrl, String region, String uri) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriCoordValidateBeforeCall(basePath, debugUrl, region, uri, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordAsync(String basePath, String debugUrl, String region, String uri, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordValidateBeforeCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordAsyncRaw(String basePath, String debugUrl, String region, String uri, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordValidateBeforeCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCoordRequestBuilder newCoverageRegionUriCoordRequestBuilder() {
        return new CoverageRegionUriCoordRequestBuilder(this);
    }

    public class CoverageRegionUriCoordRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;

        public CoverageRegionUriCoordRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCoordRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriCoordRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriCoordRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCoordRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordAsync(basePath, debugUrl, this.region, this.uri, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordAsyncRaw(basePath, debugUrl, this.region, this.uri, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCoordId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriCoordIdCall(String basePath, String debugUrl, String region, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/coord/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriCoordIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCoordId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCoordId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriCoordId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriCoordIdCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionUriCoordId(String basePath, String debugUrl, String region, String uri, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionUriCoordIdWithHttpInfo(basePath, debugUrl, region, uri, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionUriCoordIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriCoordIdValidateBeforeCall(basePath, debugUrl, region, uri, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordIdAsync(String basePath, String debugUrl, String region, String uri, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordIdValidateBeforeCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordIdValidateBeforeCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCoordIdRequestBuilder newCoverageRegionUriCoordIdRequestBuilder() {
        return new CoverageRegionUriCoordIdRequestBuilder(this);
    }

    public class CoverageRegionUriCoordIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;

        public CoverageRegionUriCoordIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCoordIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriCoordIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriCoordIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCoordIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriCoordIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordIdAsync(basePath, debugUrl, this.region, this.uri, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCoords
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriCoordsCall(String basePath, String debugUrl, String region, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/coords"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriCoordsValidateBeforeCall(String basePath, String debugUrl, String region, String uri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCoords(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCoords(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriCoordsCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionUriCoords(String basePath, String debugUrl, String region, String uri) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionUriCoordsWithHttpInfo(basePath, debugUrl, region, uri);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionUriCoordsWithHttpInfo(String basePath, String debugUrl, String region, String uri) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriCoordsValidateBeforeCall(basePath, debugUrl, region, uri, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordsAsync(String basePath, String debugUrl, String region, String uri, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordsValidateBeforeCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordsAsyncRaw(String basePath, String debugUrl, String region, String uri, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordsValidateBeforeCall(basePath, debugUrl, region, uri, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCoordsRequestBuilder newCoverageRegionUriCoordsRequestBuilder() {
        return new CoverageRegionUriCoordsRequestBuilder(this);
    }

    public class CoverageRegionUriCoordsRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;

        public CoverageRegionUriCoordsRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCoordsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriCoordsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriCoordsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCoordsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordsAsync(basePath, debugUrl, this.region, this.uri, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordsAsyncRaw(basePath, debugUrl, this.region, this.uri, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCoordsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriCoordsIdCall(String basePath, String debugUrl, String region, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/coords/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriCoordsIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCoordsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCoordsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriCoordsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriCoordsIdCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return DictAddresses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected DictAddresses getCoverageRegionUriCoordsId(String basePath, String debugUrl, String region, String uri, String id) throws ApiException {
        ApiResponse<DictAddresses> resp = getCoverageRegionUriCoordsIdWithHttpInfo(basePath, debugUrl, region, uri, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @return ApiResponse&lt;DictAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<DictAddresses> getCoverageRegionUriCoordsIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriCoordsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, null, null);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordsIdAsync(String basePath, String debugUrl, String region, String uri, String id, final ApiCallback<DictAddresses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DictAddresses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriCoordsIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionUriCoordsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCoordsIdRequestBuilder newCoverageRegionUriCoordsIdRequestBuilder() {
        return new CoverageRegionUriCoordsIdRequestBuilder(this);
    }

    public class CoverageRegionUriCoordsIdRequestBuilder {
        private CoordsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;

        public CoverageRegionUriCoordsIdRequestBuilder(CoordsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCoordsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriCoordsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriCoordsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCoordsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriCoordsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<DictAddresses > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordsIdAsync(basePath, debugUrl, this.region, this.uri, this.id, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCoordsIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, callback);
        }
    }
}
