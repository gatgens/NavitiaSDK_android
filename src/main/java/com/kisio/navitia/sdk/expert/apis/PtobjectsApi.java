/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.78.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.expert.apis;

import com.kisio.navitia.sdk.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.expert.invokers.ApiException;
import com.kisio.navitia.sdk.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.expert.invokers.Configuration;
import com.kisio.navitia.sdk.expert.invokers.Pair;
import com.kisio.navitia.sdk.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.expert.models.PtObjects;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PtobjectsApi {
    private ApiClient apiClient;

    public PtobjectsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatPtObjects
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatPtObjectsCall(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/pt_objects"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (q != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (adminUri != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "admin_uri[]", adminUri));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatPtObjectsValidateBeforeCall(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getCoverageLonLatPtObjects(Async)");
        }
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatPtObjects(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatPtObjects(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatPtObjectsCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PtObjects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PtObjects getCoverageLonLatPtObjects(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PtObjects> resp = getCoverageLonLatPtObjectsWithHttpInfo(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PtObjects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PtObjects> getCoverageLonLatPtObjectsWithHttpInfo(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        okhttp3.Call call = getCoverageLonLatPtObjectsValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PtObjects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPtObjectsAsync(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PtObjects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatPtObjectsValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PtObjects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPtObjectsAsyncRaw(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageLonLatPtObjectsValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatPtObjectsRequestBuilder newCoverageLonLatPtObjectsRequestBuilder() {
        return new CoverageLonLatPtObjectsRequestBuilder(this);
    }

    public class CoverageLonLatPtObjectsRequestBuilder {
        private PtobjectsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String q;
        private BigDecimal lat;
        private BigDecimal lon;
        private List<String> type;
        private Integer count;
        private List<String> adminUri;
        private Integer depth;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageLonLatPtObjectsRequestBuilder(PtobjectsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatPtObjectsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatPtObjectsRequestBuilder withQ(String q) {
            this.q = q;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withAdminUri(List<String> adminUri) {
            this.adminUri = adminUri;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatPtObjectsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<PtObjects > callback) throws ApiException {
            return currentApi.getCoverageLonLatPtObjectsAsync(basePath, debugUrl, this.q, this.lat, this.lon, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.disableDisruption, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatPtObjectsAsyncRaw(basePath, debugUrl, this.q, this.lat, this.lon, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.disableDisruption, callback);
        }
    }
    /**
     * Build call for getCoverageRegionPtObjects
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionPtObjectsCall(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/pt_objects"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (q != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (adminUri != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "admin_uri[]", adminUri));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionPtObjectsValidateBeforeCall(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getCoverageRegionPtObjects(Async)");
        }
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionPtObjects(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionPtObjectsCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return PtObjects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected PtObjects getCoverageRegionPtObjects(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        ApiResponse<PtObjects> resp = getCoverageRegionPtObjectsWithHttpInfo(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, disableDisruption);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @return ApiResponse&lt;PtObjects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<PtObjects> getCoverageRegionPtObjectsWithHttpInfo(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption) throws ApiException {
        okhttp3.Call call = getCoverageRegionPtObjectsValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, disableDisruption, null, null);
        Type localVarReturnType = new TypeToken<PtObjects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPtObjectsAsync(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<PtObjects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionPtObjectsValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PtObjects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'network', u'commercial_mode', u'line', u'line_group', u'route', u'stop_area'])
     * @param count The maximum number of ptobjects returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPtObjectsAsyncRaw(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, Boolean disableDisruption, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCoverageRegionPtObjectsValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, disableDisruption, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionPtObjectsRequestBuilder newCoverageRegionPtObjectsRequestBuilder() {
        return new CoverageRegionPtObjectsRequestBuilder(this);
    }

    public class CoverageRegionPtObjectsRequestBuilder {
        private PtobjectsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String q;
        private String region;
        private List<String> type;
        private Integer count;
        private List<String> adminUri;
        private Integer depth;
        private Boolean disableGeojson;
        private Boolean disableDisruption;

        public CoverageRegionPtObjectsRequestBuilder(PtobjectsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionPtObjectsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionPtObjectsRequestBuilder withQ(String q) {
            this.q = q;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withAdminUri(List<String> adminUri) {
            this.adminUri = adminUri;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionPtObjectsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<PtObjects > callback) throws ApiException {
            return currentApi.getCoverageRegionPtObjectsAsync(basePath, debugUrl, this.q, this.region, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.disableDisruption, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionPtObjectsAsyncRaw(basePath, debugUrl, this.q, this.region, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.disableDisruption, callback);
        }
    }
}
