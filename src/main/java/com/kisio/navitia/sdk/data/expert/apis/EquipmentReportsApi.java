/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.80.2-3-g25474e0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.data.expert.apis;

import com.kisio.navitia.sdk.data.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.data.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.data.expert.invokers.ApiException;
import com.kisio.navitia.sdk.data.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.data.expert.invokers.Pair;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.data.expert.models.EquipmentReports;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EquipmentReportsApi {
    private final ApiClient apiClient;

    public EquipmentReportsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoordLonLatEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoordLonLatEquipmentReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coord/{lon};{lat}/equipment_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoordLonLatEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordLonLatEquipmentReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordLonLatEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoordLonLatEquipmentReportsCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoordLonLatEquipmentReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoordLonLatEquipmentReportsWithHttpInfo(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoordLonLatEquipmentReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoordLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoordLonLatEquipmentReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoordLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoordLonLatEquipmentReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoordLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoordLonLatEquipmentReportsRequestBuilder newCoordLonLatEquipmentReportsRequestBuilder() {
        return new CoordLonLatEquipmentReportsRequestBuilder(this);
    }

    public class CoordLonLatEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoordLonLatEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoordLonLatEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoordLonLatEquipmentReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoordLonLatEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoordLonLatEquipmentReportsAsync(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoordLonLatEquipmentReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
    /**
     * Build call for getCoordsLonLatEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoordsLonLatEquipmentReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coords/{lon};{lat}/equipment_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoordsLonLatEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoordsLonLatEquipmentReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoordsLonLatEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoordsLonLatEquipmentReportsCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoordsLonLatEquipmentReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoordsLonLatEquipmentReportsWithHttpInfo(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoordsLonLatEquipmentReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoordsLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoordsLonLatEquipmentReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoordsLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoordsLonLatEquipmentReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoordsLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoordsLonLatEquipmentReportsRequestBuilder newCoordsLonLatEquipmentReportsRequestBuilder() {
        return new CoordsLonLatEquipmentReportsRequestBuilder(this);
    }

    public class CoordsLonLatEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoordsLonLatEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoordsLonLatEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoordsLonLatEquipmentReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoordsLonLatEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoordsLonLatEquipmentReportsAsync(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoordsLonLatEquipmentReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatEquipmentReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/equipment_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatEquipmentReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatEquipmentReportsCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoverageLonLatEquipmentReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoverageLonLatEquipmentReportsWithHttpInfo(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoverageLonLatEquipmentReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoverageLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatEquipmentReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatEquipmentReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatEquipmentReportsRequestBuilder newCoverageLonLatEquipmentReportsRequestBuilder() {
        return new CoverageLonLatEquipmentReportsRequestBuilder(this);
    }

    public class CoverageLonLatEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoverageLonLatEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatEquipmentReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatEquipmentReportsAsync(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatEquipmentReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriEquipmentReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/equipment_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriEquipmentReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriEquipmentReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriEquipmentReportsCall(basePath, debugUrl, lat, lon, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoverageLonLatUriEquipmentReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoverageLonLatUriEquipmentReportsWithHttpInfo(basePath, debugUrl, lat, lon, uri, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoverageLonLatUriEquipmentReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriEquipmentReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriEquipmentReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriEquipmentReportsRequestBuilder newCoverageLonLatUriEquipmentReportsRequestBuilder() {
        return new CoverageLonLatUriEquipmentReportsRequestBuilder(this);
    }

    public class CoverageLonLatUriEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoverageLonLatUriEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriEquipmentReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriEquipmentReportsAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriEquipmentReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
    /**
     * Build call for getCoverageRegionEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionEquipmentReportsCall(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/equipment_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionEquipmentReportsCall(basePath, debugUrl, region, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoverageRegionEquipmentReports(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoverageRegionEquipmentReportsWithHttpInfo(basePath, debugUrl, region, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoverageRegionEquipmentReportsWithHttpInfo(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoverageRegionEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionEquipmentReportsAsync(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionEquipmentReportsAsyncRaw(String basePath, String debugUrl, String region, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionEquipmentReportsRequestBuilder newCoverageRegionEquipmentReportsRequestBuilder() {
        return new CoverageRegionEquipmentReportsRequestBuilder(this);
    }

    public class CoverageRegionEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoverageRegionEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionEquipmentReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoverageRegionEquipmentReportsAsync(basePath, debugUrl, this.region, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionEquipmentReportsAsyncRaw(basePath, debugUrl, this.region, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriEquipmentReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriEquipmentReportsCall(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/equipment_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriEquipmentReportsValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriEquipmentReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriEquipmentReports(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriEquipmentReportsCall(basePath, debugUrl, region, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return EquipmentReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected EquipmentReports getCoverageRegionUriEquipmentReports(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        ApiResponse<EquipmentReports> resp = getCoverageRegionUriEquipmentReportsWithHttpInfo(basePath, debugUrl, region, uri, depth, count, filter, startPage, forbiddenUris);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @return ApiResponse&lt;EquipmentReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<EquipmentReports> getCoverageRegionUriEquipmentReportsWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, filter, startPage, forbiddenUris, null, null);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriEquipmentReportsAsync(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<EquipmentReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EquipmentReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 25)
     * @param filter Filter your objects (optional)
     * @param startPage The current page (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriEquipmentReportsAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, String filter, Integer startPage, List<String> forbiddenUris, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriEquipmentReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, filter, startPage, forbiddenUris, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriEquipmentReportsRequestBuilder newCoverageRegionUriEquipmentReportsRequestBuilder() {
        return new CoverageRegionUriEquipmentReportsRequestBuilder(this);
    }

    public class CoverageRegionUriEquipmentReportsRequestBuilder {
        private EquipmentReportsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer depth;
        private Integer count;
        private String filter;
        private Integer startPage;
        private List<String> forbiddenUris;

        public CoverageRegionUriEquipmentReportsRequestBuilder(EquipmentReportsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriEquipmentReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriEquipmentReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriEquipmentReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<EquipmentReports > callback) throws ApiException {
            return currentApi.getCoverageRegionUriEquipmentReportsAsync(basePath, debugUrl, this.region, this.uri, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriEquipmentReportsAsyncRaw(basePath, debugUrl, this.region, this.uri, this.depth, this.count, this.filter, this.startPage, this.forbiddenUris, callback);
        }
    }
}
