/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.87.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.data.expert.apis;

import com.kisio.navitia.sdk.data.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.data.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.data.expert.invokers.ApiException;
import com.kisio.navitia.sdk.data.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.data.expert.invokers.Configuration;
import com.kisio.navitia.sdk.data.expert.invokers.Pair;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.data.expert.models.Places;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlacesApi {
    private final ApiClient apiClient;

    public PlacesApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatPlaces
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatPlacesCall(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/places"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (q != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (adminUri != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "admin_uri[]", adminUri));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (from != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (shape != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "shape", shape));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatPlacesValidateBeforeCall(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getCoverageLonLatPlaces(Async)");
        }
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatPlaces(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatPlaces(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatPlacesCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getCoverageLonLatPlaces(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        ApiResponse<Places> resp = getCoverageLonLatPlacesWithHttpInfo(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, from, shape);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getCoverageLonLatPlacesWithHttpInfo(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        okhttp3.Call call = getCoverageLonLatPlacesValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, from, shape, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPlacesAsync(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatPlacesValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatPlacesAsyncRaw(String basePath, String debugUrl, String q, BigDecimal lat, BigDecimal lon, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatPlacesValidateBeforeCall(basePath, debugUrl, q, lat, lon, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatPlacesRequestBuilder newCoverageLonLatPlacesRequestBuilder() {
        return new CoverageLonLatPlacesRequestBuilder(this);
    }

    public class CoverageLonLatPlacesRequestBuilder {
        private PlacesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String q;
        private BigDecimal lat;
        private BigDecimal lon;
        private List<String> type;
        private Integer count;
        private List<String> adminUri;
        private Integer depth;
        private Boolean disableGeojson;
        private String from;
        private String shape;

        public CoverageLonLatPlacesRequestBuilder(PlacesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatPlacesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatPlacesRequestBuilder withQ(String q) {
            this.q = q;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withAdminUri(List<String> adminUri) {
            this.adminUri = adminUri;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withFrom(String from) {
            this.from = from;
            return this;
        }
        public CoverageLonLatPlacesRequestBuilder withShape(String shape) {
            this.shape = shape;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesAsync(basePath, debugUrl, this.q, this.lat, this.lon, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatPlacesAsyncRaw(basePath, debugUrl, this.q, this.lat, this.lon, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }
    }
    /**
     * Build call for getCoverageRegionPlaces
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionPlacesCall(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/places"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (q != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (adminUri != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "admin_uri[]", adminUri));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (from != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (shape != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "shape", shape));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionPlacesValidateBeforeCall(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getCoverageRegionPlaces(Async)");
        }
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionPlaces(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionPlacesCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getCoverageRegionPlaces(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        ApiResponse<Places> resp = getCoverageRegionPlacesWithHttpInfo(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, from, shape);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getCoverageRegionPlacesWithHttpInfo(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        okhttp3.Call call = getCoverageRegionPlacesValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, from, shape, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPlacesAsync(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionPlacesValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param region  The region you want to query (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionPlacesAsyncRaw(String basePath, String debugUrl, String q, String region, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionPlacesValidateBeforeCall(basePath, debugUrl, q, region, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionPlacesRequestBuilder newCoverageRegionPlacesRequestBuilder() {
        return new CoverageRegionPlacesRequestBuilder(this);
    }

    public class CoverageRegionPlacesRequestBuilder {
        private PlacesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String q;
        private String region;
        private List<String> type;
        private Integer count;
        private List<String> adminUri;
        private Integer depth;
        private Boolean disableGeojson;
        private String from;
        private String shape;

        public CoverageRegionPlacesRequestBuilder(PlacesApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionPlacesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionPlacesRequestBuilder withQ(String q) {
            this.q = q;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withAdminUri(List<String> adminUri) {
            this.adminUri = adminUri;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withFrom(String from) {
            this.from = from;
            return this;
        }
        public CoverageRegionPlacesRequestBuilder withShape(String shape) {
            this.shape = shape;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesAsync(basePath, debugUrl, this.q, this.region, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionPlacesAsyncRaw(basePath, debugUrl, this.q, this.region, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }
    }
    /**
     * Build call for getPlaces
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getPlacesCall(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/places";

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (q != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "type[]", type));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (adminUri != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "admin_uri[]", adminUri));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (from != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (shape != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "shape", shape));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlacesValidateBeforeCall(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getPlaces(Async)");
        }
        

        okhttp3.Call call = getPlacesCall(basePath, debugUrl, q, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return Places
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Places getPlaces(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        ApiResponse<Places> resp = getPlacesWithHttpInfo(basePath, debugUrl, q, type, count, adminUri, depth, disableGeojson, from, shape);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @return ApiResponse&lt;Places&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Places> getPlacesWithHttpInfo(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape) throws ApiException {
        okhttp3.Call call = getPlacesValidateBeforeCall(basePath, debugUrl, q, type, count, adminUri, depth, disableGeojson, from, shape, null, null);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getPlacesAsync(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<Places> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getPlacesValidateBeforeCall(basePath, debugUrl, q, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Places>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param q The data to search (required)
     * @param type The type of data to search (optional, default to [u'stop_area', u'address', u'poi', u'administrative_region'])
     * @param count The maximum number of places returned (optional, default to 10)
     * @param adminUri If filled, will restrain the search within the given admin uris (optional)
     * @param depth The depth of objects (optional, default to 1)
     * @param disableGeojson remove geojson from the response (optional)
     * @param from Coordinates longitude;latitude used to prioritize the objects around this coordinate (optional)
     * @param shape Geographical shape to limit the search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getPlacesAsyncRaw(String basePath, String debugUrl, String q, List<String> type, Integer count, List<String> adminUri, Integer depth, Boolean disableGeojson, String from, String shape, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getPlacesValidateBeforeCall(basePath, debugUrl, q, type, count, adminUri, depth, disableGeojson, from, shape, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public PlacesRequestBuilder newPlacesRequestBuilder() {
        return new PlacesRequestBuilder(this);
    }

    public class PlacesRequestBuilder {
        private PlacesApi currentApi;
        private String basePath;
        private String debugUrl;
        private String q;
        private List<String> type;
        private Integer count;
        private List<String> adminUri;
        private Integer depth;
        private Boolean disableGeojson;
        private String from;
        private String shape;

        public PlacesRequestBuilder(PlacesApi currentApi) {
            this.currentApi = currentApi;
        }

        public PlacesRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public PlacesRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public PlacesRequestBuilder withQ(String q) {
            this.q = q;
            return this;
        }
        public PlacesRequestBuilder withType(List<String> type) {
            this.type = type;
            return this;
        }
        public PlacesRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public PlacesRequestBuilder withAdminUri(List<String> adminUri) {
            this.adminUri = adminUri;
            return this;
        }
        public PlacesRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public PlacesRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public PlacesRequestBuilder withFrom(String from) {
            this.from = from;
            return this;
        }
        public PlacesRequestBuilder withShape(String shape) {
            this.shape = shape;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<Places > callback) throws ApiException {
            return currentApi.getPlacesAsync(basePath, debugUrl, this.q, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getPlacesAsyncRaw(basePath, debugUrl, this.q, this.type, this.count, this.adminUri, this.depth, this.disableGeojson, this.from, this.shape, callback);
        }
    }
}
