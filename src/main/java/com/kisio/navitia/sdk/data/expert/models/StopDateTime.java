/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.82.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.data.expert.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.kisio.navitia.sdk.data.expert.models.LinkSchema;
import com.kisio.navitia.sdk.data.expert.models.StopPoint;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * StopDateTime
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.NavitiaSDKJavaClientCodegen", date = "2019-08-26T16:17:02.580+02:00")
public class StopDateTime implements Parcelable {
  @SerializedName("stop_point")
  private StopPoint stopPoint = null;

  @SerializedName("links")
  private List<LinkSchema> links = new ArrayList<LinkSchema>();

  @SerializedName("arrival_date_time")
  private String arrivalDateTime = null;

  /**
   * Gets or Sets additionalInformations
   */
  public enum AdditionalInformationsEnum {
    @SerializedName("pick_up_only")
    PICK_UP_ONLY("pick_up_only"),
    
    @SerializedName("drop_off_only")
    DROP_OFF_ONLY("drop_off_only"),
    
    @SerializedName("on_demand_transport")
    ON_DEMAND_TRANSPORT("on_demand_transport"),
    
    @SerializedName("date_time_estimated")
    DATE_TIME_ESTIMATED("date_time_estimated");

    private String value;

    AdditionalInformationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("additional_informations")
  private List<AdditionalInformationsEnum> additionalInformations = new ArrayList<AdditionalInformationsEnum>();

  @SerializedName("departure_date_time")
  private String departureDateTime = null;

  @SerializedName("base_arrival_date_time")
  private String baseArrivalDateTime = null;

  @SerializedName("base_departure_date_time")
  private String baseDepartureDateTime = null;

  /**
   * Gets or Sets dataFreshness
   */
  public enum DataFreshnessEnum {
    @SerializedName("base_schedule")
    BASE_SCHEDULE("base_schedule"),
    
    @SerializedName("adapted_schedule")
    ADAPTED_SCHEDULE("adapted_schedule"),
    
    @SerializedName("realtime")
    REALTIME("realtime");

    private String value;

    DataFreshnessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("data_freshness")
  private DataFreshnessEnum dataFreshness = null;

  public StopDateTime stopPoint(StopPoint stopPoint) {
    this.stopPoint = stopPoint;
    return this;
  }

   /**
   * Get stopPoint
   * @return stopPoint
  **/
  @ApiModelProperty(value = "")
  public StopPoint getStopPoint() {
    return stopPoint;
  }

  public void setStopPoint(StopPoint stopPoint) {
    this.stopPoint = stopPoint;
  }

  public StopDateTime links(List<LinkSchema> links) {
    this.links = links;
    return this;
  }

  public StopDateTime addLinksItem(LinkSchema linksItem) {
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(required = true, value = "")
  public List<LinkSchema> getLinks() {
    return links;
  }

  public void setLinks(List<LinkSchema> links) {
    this.links = links;
  }

  public StopDateTime arrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
    return this;
  }

   /**
   * Get arrivalDateTime
   * @return arrivalDateTime
  **/
  @ApiModelProperty(value = "")
  public String getArrivalDateTime() {
    return arrivalDateTime;
  }

  public void setArrivalDateTime(String arrivalDateTime) {
    this.arrivalDateTime = arrivalDateTime;
  }

  public StopDateTime additionalInformations(List<AdditionalInformationsEnum> additionalInformations) {
    this.additionalInformations = additionalInformations;
    return this;
  }

  public StopDateTime addAdditionalInformationsItem(AdditionalInformationsEnum additionalInformationsItem) {
    this.additionalInformations.add(additionalInformationsItem);
    return this;
  }

   /**
   * Get additionalInformations
   * @return additionalInformations
  **/
  @ApiModelProperty(required = true, value = "")
  public List<AdditionalInformationsEnum> getAdditionalInformations() {
    return additionalInformations;
  }

  public void setAdditionalInformations(List<AdditionalInformationsEnum> additionalInformations) {
    this.additionalInformations = additionalInformations;
  }

  public StopDateTime departureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
    return this;
  }

   /**
   * Get departureDateTime
   * @return departureDateTime
  **/
  @ApiModelProperty(value = "")
  public String getDepartureDateTime() {
    return departureDateTime;
  }

  public void setDepartureDateTime(String departureDateTime) {
    this.departureDateTime = departureDateTime;
  }

  public StopDateTime baseArrivalDateTime(String baseArrivalDateTime) {
    this.baseArrivalDateTime = baseArrivalDateTime;
    return this;
  }

   /**
   * Get baseArrivalDateTime
   * @return baseArrivalDateTime
  **/
  @ApiModelProperty(value = "")
  public String getBaseArrivalDateTime() {
    return baseArrivalDateTime;
  }

  public void setBaseArrivalDateTime(String baseArrivalDateTime) {
    this.baseArrivalDateTime = baseArrivalDateTime;
  }

  public StopDateTime baseDepartureDateTime(String baseDepartureDateTime) {
    this.baseDepartureDateTime = baseDepartureDateTime;
    return this;
  }

   /**
   * Get baseDepartureDateTime
   * @return baseDepartureDateTime
  **/
  @ApiModelProperty(value = "")
  public String getBaseDepartureDateTime() {
    return baseDepartureDateTime;
  }

  public void setBaseDepartureDateTime(String baseDepartureDateTime) {
    this.baseDepartureDateTime = baseDepartureDateTime;
  }

  public StopDateTime dataFreshness(DataFreshnessEnum dataFreshness) {
    this.dataFreshness = dataFreshness;
    return this;
  }

   /**
   * Get dataFreshness
   * @return dataFreshness
  **/
  @ApiModelProperty(value = "")
  public DataFreshnessEnum getDataFreshness() {
    return dataFreshness;
  }

  public void setDataFreshness(DataFreshnessEnum dataFreshness) {
    this.dataFreshness = dataFreshness;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopDateTime stopDateTime = (StopDateTime) o;
    return Objects.equals(this.stopPoint, stopDateTime.stopPoint) &&
        Objects.equals(this.links, stopDateTime.links) &&
        Objects.equals(this.arrivalDateTime, stopDateTime.arrivalDateTime) &&
        Objects.equals(this.additionalInformations, stopDateTime.additionalInformations) &&
        Objects.equals(this.departureDateTime, stopDateTime.departureDateTime) &&
        Objects.equals(this.baseArrivalDateTime, stopDateTime.baseArrivalDateTime) &&
        Objects.equals(this.baseDepartureDateTime, stopDateTime.baseDepartureDateTime) &&
        Objects.equals(this.dataFreshness, stopDateTime.dataFreshness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopPoint, links, arrivalDateTime, additionalInformations, departureDateTime, baseArrivalDateTime, baseDepartureDateTime, dataFreshness);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopDateTime {\n");
    
    sb.append("    stopPoint: ").append(toIndentedString(stopPoint)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    arrivalDateTime: ").append(toIndentedString(arrivalDateTime)).append("\n");
    sb.append("    additionalInformations: ").append(toIndentedString(additionalInformations)).append("\n");
    sb.append("    departureDateTime: ").append(toIndentedString(departureDateTime)).append("\n");
    sb.append("    baseArrivalDateTime: ").append(toIndentedString(baseArrivalDateTime)).append("\n");
    sb.append("    baseDepartureDateTime: ").append(toIndentedString(baseDepartureDateTime)).append("\n");
    sb.append("    dataFreshness: ").append(toIndentedString(dataFreshness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(stopPoint);

    out.writeValue(links);

    out.writeValue(arrivalDateTime);

    out.writeValue(additionalInformations);

    out.writeValue(departureDateTime);

    out.writeValue(baseArrivalDateTime);

    out.writeValue(baseDepartureDateTime);

    out.writeValue(dataFreshness);
  }

  public StopDateTime() {
    super();
  }

  StopDateTime(Parcel in) {
    
    stopPoint = (StopPoint)in.readValue(StopPoint.class.getClassLoader());
    links = (List<LinkSchema>)in.readValue(LinkSchema.class.getClassLoader());
    arrivalDateTime = (String)in.readValue(null);
    additionalInformations = (List<AdditionalInformationsEnum>)in.readValue(null);
    departureDateTime = (String)in.readValue(null);
    baseArrivalDateTime = (String)in.readValue(null);
    baseDepartureDateTime = (String)in.readValue(null);
    dataFreshness = (DataFreshnessEnum)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<StopDateTime> CREATOR = new Parcelable.Creator<StopDateTime>() {
    public StopDateTime createFromParcel(Parcel in) {
      return new StopDateTime(in);
    }
    public StopDateTime[] newArray(int size) {
      return new StopDateTime[size];
    }
  };
}

