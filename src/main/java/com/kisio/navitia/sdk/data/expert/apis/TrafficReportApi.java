/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.87.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.data.expert.apis;

import com.kisio.navitia.sdk.data.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.data.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.data.expert.invokers.ApiException;
import com.kisio.navitia.sdk.data.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.data.expert.invokers.Configuration;
import com.kisio.navitia.sdk.data.expert.invokers.Pair;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.kisio.navitia.sdk.data.expert.models.TrafficReports;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrafficReportApi {
    private final ApiClient apiClient;

    public TrafficReportApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatTrafficReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatTrafficReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/traffic_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatTrafficReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatTrafficReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatTrafficReports(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatTrafficReportsCall(basePath, debugUrl, lat, lon, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return TrafficReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected TrafficReports getCoverageLonLatTrafficReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        ApiResponse<TrafficReports> resp = getCoverageLonLatTrafficReportsWithHttpInfo(basePath, debugUrl, lat, lon, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;TrafficReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<TrafficReports> getCoverageLonLatTrafficReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageLonLatTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatTrafficReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<TrafficReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatTrafficReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatTrafficReportsRequestBuilder newCoverageLonLatTrafficReportsRequestBuilder() {
        return new CoverageLonLatTrafficReportsRequestBuilder(this);
    }

    public class CoverageLonLatTrafficReportsRequestBuilder {
        private TrafficReportApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;
        private Boolean disableGeojson;

        public CoverageLonLatTrafficReportsRequestBuilder(TrafficReportApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatTrafficReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatTrafficReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatTrafficReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<TrafficReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatTrafficReportsAsync(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatTrafficReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriTrafficReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriTrafficReportsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/traffic_reports"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriTrafficReportsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriTrafficReports(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriTrafficReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriTrafficReports(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriTrafficReportsCall(basePath, debugUrl, lat, lon, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return TrafficReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected TrafficReports getCoverageLonLatUriTrafficReports(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        ApiResponse<TrafficReports> resp = getCoverageLonLatUriTrafficReportsWithHttpInfo(basePath, debugUrl, lat, lon, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;TrafficReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<TrafficReports> getCoverageLonLatUriTrafficReportsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriTrafficReportsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<TrafficReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriTrafficReportsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriTrafficReportsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriTrafficReportsRequestBuilder newCoverageLonLatUriTrafficReportsRequestBuilder() {
        return new CoverageLonLatUriTrafficReportsRequestBuilder(this);
    }

    public class CoverageLonLatUriTrafficReportsRequestBuilder {
        private TrafficReportApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;
        private Boolean disableGeojson;

        public CoverageLonLatUriTrafficReportsRequestBuilder(TrafficReportApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriTrafficReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriTrafficReportsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriTrafficReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<TrafficReports > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriTrafficReportsAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriTrafficReportsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageRegionTrafficReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionTrafficReportsCall(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/traffic_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionTrafficReportsValidateBeforeCall(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionTrafficReports(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionTrafficReportsCall(basePath, debugUrl, region, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return TrafficReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected TrafficReports getCoverageRegionTrafficReports(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        ApiResponse<TrafficReports> resp = getCoverageRegionTrafficReportsWithHttpInfo(basePath, debugUrl, region, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;TrafficReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<TrafficReports> getCoverageRegionTrafficReportsWithHttpInfo(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageRegionTrafficReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionTrafficReportsAsync(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<TrafficReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionTrafficReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionTrafficReportsAsyncRaw(String basePath, String debugUrl, String region, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionTrafficReportsValidateBeforeCall(basePath, debugUrl, region, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionTrafficReportsRequestBuilder newCoverageRegionTrafficReportsRequestBuilder() {
        return new CoverageRegionTrafficReportsRequestBuilder(this);
    }

    public class CoverageRegionTrafficReportsRequestBuilder {
        private TrafficReportApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;
        private Boolean disableGeojson;

        public CoverageRegionTrafficReportsRequestBuilder(TrafficReportApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionTrafficReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionTrafficReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionTrafficReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<TrafficReports > callback) throws ApiException {
            return currentApi.getCoverageRegionTrafficReportsAsync(basePath, debugUrl, this.region, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionTrafficReportsAsyncRaw(basePath, debugUrl, this.region, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriTrafficReports
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriTrafficReportsCall(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/traffic_reports"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriTrafficReportsValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriTrafficReports(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriTrafficReports(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriTrafficReportsCall(basePath, debugUrl, region, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return TrafficReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected TrafficReports getCoverageRegionUriTrafficReports(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        ApiResponse<TrafficReports> resp = getCoverageRegionUriTrafficReportsWithHttpInfo(basePath, debugUrl, region, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @return ApiResponse&lt;TrafficReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<TrafficReports> getCoverageRegionUriTrafficReportsWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriTrafficReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, null, null);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriTrafficReportsAsync(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<TrafficReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriTrafficReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrafficReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of objects per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param disableGeojson remove geojson from the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriTrafficReportsAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer depth, Integer count, Integer startPage, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, Boolean disableGeojson, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriTrafficReportsValidateBeforeCall(basePath, debugUrl, region, uri, depth, count, startPage, forbiddenId, forbiddenUris, distance, disableGeojson, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriTrafficReportsRequestBuilder newCoverageRegionUriTrafficReportsRequestBuilder() {
        return new CoverageRegionUriTrafficReportsRequestBuilder(this);
    }

    public class CoverageRegionUriTrafficReportsRequestBuilder {
        private TrafficReportApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;
        private Boolean disableGeojson;

        public CoverageRegionUriTrafficReportsRequestBuilder(TrafficReportApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriTrafficReportsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriTrafficReportsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriTrafficReportsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<TrafficReports > callback) throws ApiException {
            return currentApi.getCoverageRegionUriTrafficReportsAsync(basePath, debugUrl, this.region, this.uri, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriTrafficReportsAsyncRaw(basePath, debugUrl, this.region, this.uri, this.depth, this.count, this.startPage, this.forbiddenId, this.forbiddenUris, this.distance, this.disableGeojson, callback);
        }
    }
}
