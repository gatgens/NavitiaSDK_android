/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.87.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kisio.navitia.sdk.data.expert.apis;

import com.kisio.navitia.sdk.data.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.data.expert.invokers.ApiClient;
import com.kisio.navitia.sdk.data.expert.invokers.ApiException;
import com.kisio.navitia.sdk.data.expert.invokers.ApiResponse;
import com.kisio.navitia.sdk.data.expert.invokers.Configuration;
import com.kisio.navitia.sdk.data.expert.invokers.Pair;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressRequestBody;
import com.kisio.navitia.sdk.data.expert.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.joda.time.DateTime;
import com.kisio.navitia.sdk.data.expert.models.JourneyPatternPoints;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JourneyPatternPointsApi {
    private final ApiClient apiClient;

    public JourneyPatternPointsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageLonLatJourneyPatternPoints
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatJourneyPatternPointsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/journey_pattern_points"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatJourneyPatternPointsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatJourneyPatternPoints(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatJourneyPatternPoints(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageLonLatJourneyPatternPoints(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageLonLatJourneyPatternPointsWithHttpInfo(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageLonLatJourneyPatternPointsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatJourneyPatternPointsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatJourneyPatternPointsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatJourneyPatternPointsRequestBuilder newCoverageLonLatJourneyPatternPointsRequestBuilder() {
        return new CoverageLonLatJourneyPatternPointsRequestBuilder(this);
    }

    public class CoverageLonLatJourneyPatternPointsRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatJourneyPatternPointsRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatJourneyPatternPointsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatJourneyPatternPointsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageLonLatJourneyPatternPointsAsync(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatJourneyPatternPointsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatJourneyPatternPointsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatJourneyPatternPointsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/journey_pattern_points/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatJourneyPatternPointsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatJourneyPatternPointsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsIdCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageLonLatJourneyPatternPointsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageLonLatJourneyPatternPointsIdWithHttpInfo(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageLonLatJourneyPatternPointsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatJourneyPatternPointsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatJourneyPatternPointsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatJourneyPatternPointsIdRequestBuilder newCoverageLonLatJourneyPatternPointsIdRequestBuilder() {
        return new CoverageLonLatJourneyPatternPointsIdRequestBuilder(this);
    }

    public class CoverageLonLatJourneyPatternPointsIdRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatJourneyPatternPointsIdRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatJourneyPatternPointsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageLonLatJourneyPatternPointsIdAsync(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatJourneyPatternPointsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriJourneyPatternPoints
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriJourneyPatternPointsCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/journey_pattern_points"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriJourneyPatternPointsValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriJourneyPatternPoints(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriJourneyPatternPoints(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriJourneyPatternPoints(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageLonLatUriJourneyPatternPoints(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageLonLatUriJourneyPatternPointsWithHttpInfo(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageLonLatUriJourneyPatternPointsWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriJourneyPatternPointsAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriJourneyPatternPointsAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, lat, lon, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriJourneyPatternPointsRequestBuilder newCoverageLonLatUriJourneyPatternPointsRequestBuilder() {
        return new CoverageLonLatUriJourneyPatternPointsRequestBuilder(this);
    }

    public class CoverageLonLatUriJourneyPatternPointsRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageLonLatUriJourneyPatternPointsRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriJourneyPatternPointsAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriJourneyPatternPointsAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageLonLatUriJourneyPatternPointsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageLonLatUriJourneyPatternPointsIdCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{lon};{lat}/{uri}/journey_pattern_points/{id}"
            .replaceAll("\\{" + "lat" + "\\}", apiClient.escapePathParam(lat.toString()))
            .replaceAll("\\{" + "lon" + "\\}", apiClient.escapePathParam(lon.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageLonLatUriJourneyPatternPointsIdValidateBeforeCall(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getCoverageLonLatUriJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getCoverageLonLatUriJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageLonLatUriJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageLonLatUriJourneyPatternPointsId(Async)");
        }
        

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsIdCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageLonLatUriJourneyPatternPointsId(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageLonLatUriJourneyPatternPointsIdWithHttpInfo(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageLonLatUriJourneyPatternPointsIdWithHttpInfo(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriJourneyPatternPointsIdAsync(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param lat  The latitude of where the coord you want to query (required)
     * @param lon  The longitude of where the coord you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageLonLatUriJourneyPatternPointsIdAsyncRaw(String basePath, String debugUrl, BigDecimal lat, BigDecimal lon, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageLonLatUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, lat, lon, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder newCoverageLonLatUriJourneyPatternPointsIdRequestBuilder() {
        return new CoverageLonLatUriJourneyPatternPointsIdRequestBuilder(this);
    }

    public class CoverageLonLatUriJourneyPatternPointsIdRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private BigDecimal lat;
        private BigDecimal lon;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withLat(BigDecimal lat) {
            this.lat = lat;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withLon(BigDecimal lon) {
            this.lon = lon;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageLonLatUriJourneyPatternPointsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriJourneyPatternPointsIdAsync(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageLonLatUriJourneyPatternPointsIdAsyncRaw(basePath, debugUrl, this.lat, this.lon, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionJourneyPatternPoints
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionJourneyPatternPointsCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/journey_pattern_points"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionJourneyPatternPointsValidateBeforeCall(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionJourneyPatternPoints(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageRegionJourneyPatternPoints(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageRegionJourneyPatternPointsWithHttpInfo(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageRegionJourneyPatternPointsWithHttpInfo(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionJourneyPatternPointsAsync(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionJourneyPatternPointsAsyncRaw(String basePath, String debugUrl, String region, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionJourneyPatternPointsRequestBuilder newCoverageRegionJourneyPatternPointsRequestBuilder() {
        return new CoverageRegionJourneyPatternPointsRequestBuilder(this);
    }

    public class CoverageRegionJourneyPatternPointsRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionJourneyPatternPointsRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionJourneyPatternPointsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionJourneyPatternPointsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionJourneyPatternPointsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageRegionJourneyPatternPointsAsync(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionJourneyPatternPointsAsyncRaw(basePath, debugUrl, this.region, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionJourneyPatternPointsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionJourneyPatternPointsIdCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/journey_pattern_points/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionJourneyPatternPointsIdValidateBeforeCall(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionJourneyPatternPointsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsIdCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageRegionJourneyPatternPointsId(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageRegionJourneyPatternPointsIdWithHttpInfo(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageRegionJourneyPatternPointsIdWithHttpInfo(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionJourneyPatternPointsIdAsync(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionJourneyPatternPointsIdAsyncRaw(String basePath, String debugUrl, String region, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionJourneyPatternPointsIdRequestBuilder newCoverageRegionJourneyPatternPointsIdRequestBuilder() {
        return new CoverageRegionJourneyPatternPointsIdRequestBuilder(this);
    }

    public class CoverageRegionJourneyPatternPointsIdRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionJourneyPatternPointsIdRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionJourneyPatternPointsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionJourneyPatternPointsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionJourneyPatternPointsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageRegionJourneyPatternPointsIdAsync(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionJourneyPatternPointsIdAsyncRaw(basePath, debugUrl, this.region, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriJourneyPatternPoints
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriJourneyPatternPointsCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/journey_pattern_points"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (filter != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriJourneyPatternPointsValidateBeforeCall(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriJourneyPatternPoints(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriJourneyPatternPoints(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageRegionUriJourneyPatternPoints(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageRegionUriJourneyPatternPointsWithHttpInfo(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageRegionUriJourneyPatternPointsWithHttpInfo(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriJourneyPatternPointsAsync(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param filter The filter parameter (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriJourneyPatternPointsAsyncRaw(String basePath, String debugUrl, String region, String uri, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, String filter, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsValidateBeforeCall(basePath, debugUrl, region, uri, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, filter, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriJourneyPatternPointsRequestBuilder newCoverageRegionUriJourneyPatternPointsRequestBuilder() {
        return new CoverageRegionUriJourneyPatternPointsRequestBuilder(this);
    }

    public class CoverageRegionUriJourneyPatternPointsRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private String filter;
        private List<String> tags;

        public CoverageRegionUriJourneyPatternPointsRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriJourneyPatternPointsRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriJourneyPatternPointsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withFilter(String filter) {
            this.filter = filter;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageRegionUriJourneyPatternPointsAsync(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriJourneyPatternPointsAsyncRaw(basePath, debugUrl, this.region, this.uri, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.filter, this.tags, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriJourneyPatternPointsId
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private okhttp3.Call getCoverageRegionUriJourneyPatternPointsIdCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables CC
        String localVarPath = "/coverage/{region}/{uri}/journey_pattern_points/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();

        if (basePath != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "basePath", basePath));
        }
        if (debugUrl != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "debugUrl", debugUrl));
        }
        if (startPage != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (count != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (depth != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (forbiddenId != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (externalCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "external_code", externalCode));
        if (headsign != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "headsign", headsign));
        if (showCodes != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_codes", showCodes));
        if (odtLevel != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "odt_level", odtLevel));
        if (dataFreshness != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "data_freshness", dataFreshness));
        if (distance != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (since != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));
        if (until != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "until", until));
        if (disableGeojson != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_geojson", disableGeojson));
        if (disableDisruption != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "disable_disruption", disableDisruption));
        if (tags != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "tags[]", tags));

        Map<String, String> localVarHeaderParams = new HashMap<>();

        Map<String, Object> localVarFormParams = new HashMap<>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoverageRegionUriJourneyPatternPointsIdValidateBeforeCall(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriJourneyPatternPointsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionUriJourneyPatternPointsId(Async)");
        }
        

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsIdCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return JourneyPatternPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected JourneyPatternPoints getCoverageRegionUriJourneyPatternPointsId(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        ApiResponse<JourneyPatternPoints> resp = getCoverageRegionUriJourneyPatternPointsIdWithHttpInfo(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @return ApiResponse&lt;JourneyPatternPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<JourneyPatternPoints> getCoverageRegionUriJourneyPatternPointsIdWithHttpInfo(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags) throws ApiException {
        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, null, null);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriJourneyPatternPointsIdAsync(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<JourneyPatternPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JourneyPatternPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param basePath The API base path (optional)
     * @param debugUrl The API Debug url (optional)
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param id Id of the object you want to query (required)
     * @param startPage The page where you want to start (optional)
     * @param count Number of objects you want on a page (optional, default to 25)
     * @param depth The depth of your object (optional, default to 1)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param externalCode An external code to query (optional)
     * @param headsign filter vehicle journeys on headsign (optional)
     * @param showCodes show more identification codes (optional)
     * @param odtLevel odt level (optional, default to all)
     * @param dataFreshness Define the freshness of data to use to filter vehicle_journeys along with parameters &amp;since and/or &amp;until . Provides only the vehicle_journeys valid for the data freshness level requested. Using &#x60;&amp;data_freshness&#x3D;base_schedule&#x60; will return all original vehicle_journeys onlywhereas using &#x60;&amp;data_freshness&#x3D;realtime&#x60; will return vehicle_journeys after applyingmodifications by realtime (amended vehicle_journeys, and non-impacted original vehicle_journeys). (optional, default to base_schedule)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param since filters objects not valid before this date (optional)
     * @param until filters objects not valid after this date (optional)
     * @param disableGeojson remove geojson from the response (optional)
     * @param disableDisruption remove disruptions from the response (optional)
     * @param tags If filled, will restrain the search within the given disruption tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected okhttp3.Call getCoverageRegionUriJourneyPatternPointsIdAsyncRaw(String basePath, String debugUrl, String region, String uri, String id, Integer startPage, Integer count, Integer depth, List<String> forbiddenId, List<String> forbiddenUris, String externalCode, String headsign, Boolean showCodes, String odtLevel, String dataFreshness, Integer distance, DateTime since, DateTime until, Boolean disableGeojson, Boolean disableDisruption, List<String> tags, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCoverageRegionUriJourneyPatternPointsIdValidateBeforeCall(basePath, debugUrl, region, uri, id, startPage, count, depth, forbiddenId, forbiddenUris, externalCode, headsign, showCodes, odtLevel, dataFreshness, distance, since, until, disableGeojson, disableDisruption, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriJourneyPatternPointsIdRequestBuilder newCoverageRegionUriJourneyPatternPointsIdRequestBuilder() {
        return new CoverageRegionUriJourneyPatternPointsIdRequestBuilder(this);
    }

    public class CoverageRegionUriJourneyPatternPointsIdRequestBuilder {
        private JourneyPatternPointsApi currentApi;
        private String basePath;
        private String debugUrl;
        private String region;
        private String uri;
        private String id;
        private Integer startPage;
        private Integer count;
        private Integer depth;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private String externalCode;
        private String headsign;
        private Boolean showCodes;
        private String odtLevel;
        private String dataFreshness;
        private Integer distance;
        private DateTime since;
        private DateTime until;
        private Boolean disableGeojson;
        private Boolean disableDisruption;
        private List<String> tags;

        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder(JourneyPatternPointsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withBasePath(String basePath) {
            this.basePath = basePath;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDebugUrl(String debugUrl) {
            this.debugUrl = debugUrl;
            return this;
        }

        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withExternalCode(String externalCode) {
            this.externalCode = externalCode;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withHeadsign(String headsign) {
            this.headsign = headsign;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withShowCodes(Boolean showCodes) {
            this.showCodes = showCodes;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withOdtLevel(String odtLevel) {
            this.odtLevel = odtLevel;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDataFreshness(String dataFreshness) {
            this.dataFreshness = dataFreshness;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withSince(DateTime since) {
            this.since = since;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withUntil(DateTime until) {
            this.until = until;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDisableGeojson(Boolean disableGeojson) {
            this.disableGeojson = disableGeojson;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withDisableDisruption(Boolean disableDisruption) {
            this.disableDisruption = disableDisruption;
            return this;
        }
        public CoverageRegionUriJourneyPatternPointsIdRequestBuilder withTags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        public okhttp3.Call get(final ApiCallback<JourneyPatternPoints > callback) throws ApiException {
            return currentApi.getCoverageRegionUriJourneyPatternPointsIdAsync(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }

        public okhttp3.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriJourneyPatternPointsIdAsyncRaw(basePath, debugUrl, this.region, this.uri, this.id, this.startPage, this.count, this.depth, this.forbiddenId, this.forbiddenUris, this.externalCode, this.headsign, this.showCodes, this.odtLevel, this.dataFreshness, this.distance, this.since, this.until, this.disableGeojson, this.disableDisruption, this.tags, callback);
        }
    }
}
